import{readFileSync as v,writeFileSync as b}from"fs";import{execa as w}from"execa";import s from"chalk";import{table as E,getBorderCharacters as U}from"table";import y from"strip-ansi";import C from"stream-to-array";var S={command:"gas-report",describe:"Create a gas report",builder(n){return n.options({save:{type:"string",desc:"Save the gas report to a file"},compare:{type:"string",desc:"Compare to an existing gas report"},stdin:{type:"boolean",desc:"Parse the gas report logs from stdin instead of running an internal test command"}})},async handler(n){let e;try{e=await P(n)}catch(a){console.error(a),setTimeout(()=>process.exit());return}let{compare:i}=n;if(i)try{let a=JSON.parse(v(i,"utf8"));e=e.map(d=>{let o=a.find(r=>r.file===d.file&&r.name===d.name);return{...d,prevGasUsed:o?.gasUsed}})}catch{console.log(s.red(`Gas report to compare not found: ${i}`)),i=void 0}x(e,i),n.save&&F(e,n.save),process.exit(0)}},N=S;async function P(n){console.log("Running gas report");let e=[],i;try{n.stdin?(console.log("Waiting for stdin..."),process.stdin.pipe(process.stdout),i=(await C(process.stdin)).map(t=>t.toString()).join(`
`),console.log("Done reading stdin")):i=(await w("forge",["test","-vvv"],{stdio:["inherit","pipe","inherit"],env:{GAS_REPORTER_ENABLED:"true"}})).stdout}catch(t){throw console.log(t.stdout??t),console.log(s.red(`
-----------
Error while running the gas report (see above)`)),t}let a=i.split(`
`).map(y),d=/^\s*GAS REPORT: (\d+) (.*)$/,o=/^\[(?:PASS|FAIL).*\] (\w+)\(\)/,r=/^Running \d+ tests? for (.*):(.*)$/;function l(t,c=a.length-1){for(let p=c;p>=0;p--){let g=a[p];if(t.test(g))return p}return-1}for(let t=0;t<a.length;t++){let c=a[t].match(d);if(!c)continue;let p=parseInt(c[1]),g=c[2],f=l(o,t);if(f===-1)throw new Error("Could not find nearest test function, did `forge test` output change?");let u=l(r,f);if(u===-1)throw new Error("Could not find nearest test filename, did `forge test` output change?");let m=a[f].match(o);if(!m)throw new Error("Could not parse test function name, did `forge test` output change?");let h=a[u].match(r);if(!h)throw new Error("Could not parse test filename, did `forge test` output change?");let R=m[1],G=h[1];e.push({file:G,test:R,name:g,gasUsed:p})}return e.sort((t,c)=>t.file.localeCompare(c.file)),e}function x(n,e){e&&console.log(s.bold(`Gas report compared to ${e}`));let i=[s.bold("File"),s.bold("Test"),s.bold("Name"),s.bold("Gas used"),...e?[s.bold("Prev gas used"),s.bold("Difference")]:[]],a=n.map(o=>{let r=o.prevGasUsed?o.gasUsed-o.prevGasUsed:0,l=r>0?s.red(`+${r}`):r<0?s.green(`${r}`):r,t=e?[o.prevGasUsed??"n/a",l]:[],c=r>0?s.red(o.gasUsed):r<0?s.green(o.gasUsed):o.gasUsed;return[o.file,o.test,o.name,c,...t]}),d=[i,...a];console.log(E(d,{border:U("norc")}))}function F(n,e){console.log(s.bold(`Saving gas report to ${e}`)),b(e,`${JSON.stringify(n,null,2)}
`)}export{N as a};
//# sourceMappingURL=chunk-OPZOQG5Z.js.map