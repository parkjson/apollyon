{"version":3,"sources":["../ts/index.ts"],"sourcesContent":["import type { CommandModule } from \"yargs\";\nimport { readFileSync, writeFileSync } from \"fs\";\nimport { execa } from \"execa\";\nimport chalk from \"chalk\";\nimport { table, getBorderCharacters } from \"table\";\nimport stripAnsi from \"strip-ansi\";\nimport toArray from \"stream-to-array\";\n\n/**\n * Print the gas report to the console, save it to a file and compare it to a previous gas report if provided.\n *\n * Requires foundry to be installed. Inherit from GasReporter and use startGasReport/endGasReport to measure gas used.\n *\n * ```solidity\n * contract MyContractTest is Test, GasReporter {\n *   function testBuffer() public pure {\n *     startGasReport(\"allocate a buffer\");\n *     Buffer buffer = Buffer_.allocate(32);\n *     endGasReport();\n *\n *     bytes32 value = keccak256(\"some data\");\n *\n *     startGasReport(\"append 32 bytes to a buffer\");\n *     buffer.append(value);\n *     endGasReport();\n *  }\n * }\n * ```\n */\n\ntype Options = {\n  path: string[];\n  save?: string;\n  compare?: string;\n  stdin?: boolean;\n};\n\ntype GasReportEntry = {\n  file: string;\n  test: string;\n  name: string;\n  gasUsed: number;\n  prevGasUsed?: number;\n};\n\ntype GasReport = GasReportEntry[];\n\nconst commandModule: CommandModule<Options, Options> = {\n  command: \"gas-report\",\n\n  describe: \"Create a gas report\",\n\n  builder(yargs) {\n    return yargs.options({\n      save: { type: \"string\", desc: \"Save the gas report to a file\" },\n      compare: { type: \"string\", desc: \"Compare to an existing gas report\" },\n      stdin: {\n        type: \"boolean\",\n        desc: \"Parse the gas report logs from stdin instead of running an internal test command\",\n      },\n    });\n  },\n\n  async handler(options) {\n    let gasReport: GasReport;\n    try {\n      gasReport = await runGasReport(options);\n    } catch (error) {\n      console.error(error);\n      setTimeout(() => process.exit());\n      return;\n    }\n\n    // If this gas report should be compared to an existing one, load the existing one\n    let { compare } = options;\n    if (compare) {\n      try {\n        const compareGasReport: GasReport = JSON.parse(readFileSync(compare, \"utf8\"));\n        // Merge the previous gas report with the new one\n        gasReport = gasReport.map((entry) => {\n          const prevEntry = compareGasReport.find((e) => e.file === entry.file && e.name === entry.name);\n          return { ...entry, prevGasUsed: prevEntry?.gasUsed };\n        });\n      } catch {\n        console.log(chalk.red(`Gas report to compare not found: ${compare}`));\n        compare = undefined;\n      }\n    }\n\n    // Print gas report\n    printGasReport(gasReport, compare);\n\n    // Save gas report to file if requested\n    if (options.save) saveGasReport(gasReport, options.save);\n\n    process.exit(0);\n  },\n};\n\nexport default commandModule;\n\nasync function runGasReport(options: Options): Promise<GasReport> {\n  console.log(\"Running gas report\");\n  const gasReport: GasReport = [];\n\n  // Extract the logs from the child process\n  let logs: string;\n  try {\n    if (options.stdin) {\n      // Read the logs from stdin and pipe them to stdout for visibility\n      console.log(\"Waiting for stdin...\");\n      process.stdin.pipe(process.stdout);\n      logs = (await toArray(process.stdin)).map((chunk) => chunk.toString()).join(\"\\n\");\n      console.log(\"Done reading stdin\");\n    } else {\n      // Run the default test command to capture the logs\n      const child = execa(\"forge\", [\"test\", \"-vvv\"], {\n        stdio: [\"inherit\", \"pipe\", \"inherit\"],\n        env: { GAS_REPORTER_ENABLED: \"true\" },\n      });\n      logs = (await child).stdout;\n    }\n  } catch (error: any) {\n    console.log(error.stdout ?? error);\n    console.log(chalk.red(\"\\n-----------\\nError while running the gas report (see above)\"));\n    throw error;\n  }\n\n  // Extract the gas reports from the logs\n  const lines = logs.split(\"\\n\").map(stripAnsi);\n  const gasReportPattern = /^\\s*GAS REPORT: (\\d+) (.*)$/;\n  const testFunctionPattern = /^\\[(?:PASS|FAIL).*\\] (\\w+)\\(\\)/;\n  const testFilePattern = /^Running \\d+ tests? for (.*):(.*)$/;\n\n  function nearestLine(pattern: RegExp, startIndex: number = lines.length - 1): number {\n    for (let i = startIndex; i >= 0; i--) {\n      const line = lines[i];\n      if (pattern.test(line)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  for (let i = 0; i < lines.length; i++) {\n    const matches = lines[i].match(gasReportPattern);\n    if (!matches) continue;\n\n    const gasUsed = parseInt(matches[1]);\n    const name = matches[2];\n\n    const testFunctionLineIndex = nearestLine(testFunctionPattern, i);\n    if (testFunctionLineIndex === -1) {\n      throw new Error(\"Could not find nearest test function, did `forge test` output change?\");\n    }\n    const testFileLineIndex = nearestLine(testFilePattern, testFunctionLineIndex);\n    if (testFileLineIndex === -1) {\n      throw new Error(\"Could not find nearest test filename, did `forge test` output change?\");\n    }\n\n    const functionMatches = lines[testFunctionLineIndex].match(testFunctionPattern);\n    if (!functionMatches) {\n      throw new Error(\"Could not parse test function name, did `forge test` output change?\");\n    }\n    const fileMatches = lines[testFileLineIndex].match(testFilePattern);\n    if (!fileMatches) {\n      throw new Error(\"Could not parse test filename, did `forge test` output change?\");\n    }\n\n    const test = functionMatches[1];\n    const file = fileMatches[1];\n\n    gasReport.push({ file, test, name, gasUsed });\n  }\n\n  gasReport.sort((a, b) => a.file.localeCompare(b.file));\n\n  return gasReport;\n}\n\nfunction printGasReport(gasReport: GasReport, compare?: string) {\n  if (compare) console.log(chalk.bold(`Gas report compared to ${compare}`));\n\n  const headers = [\n    chalk.bold(\"File\"),\n    chalk.bold(\"Test\"),\n    chalk.bold(\"Name\"),\n    chalk.bold(\"Gas used\"),\n    ...(compare ? [chalk.bold(\"Prev gas used\"), chalk.bold(\"Difference\")] : []),\n  ];\n\n  const values = gasReport.map((entry) => {\n    const diff = entry.prevGasUsed ? entry.gasUsed - entry.prevGasUsed : 0;\n    const diffEntry = diff > 0 ? chalk.red(`+${diff}`) : diff < 0 ? chalk.green(`${diff}`) : diff;\n    const compareColumns = compare ? [entry.prevGasUsed ?? \"n/a\", diffEntry] : [];\n    const gasUsedEntry = diff > 0 ? chalk.red(entry.gasUsed) : diff < 0 ? chalk.green(entry.gasUsed) : entry.gasUsed;\n    return [entry.file, entry.test, entry.name, gasUsedEntry, ...compareColumns];\n  });\n\n  const rows = [headers, ...values];\n\n  console.log(table(rows, { border: getBorderCharacters(\"norc\") }));\n}\n\nfunction saveGasReport(gasReport: GasReport, path: string) {\n  console.log(chalk.bold(`Saving gas report to ${path}`));\n  writeFileSync(path, `${JSON.stringify(gasReport, null, 2)}\\n`);\n}\n"],"mappings":"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","names":["readFileSync","writeFileSync","execa","chalk","table","getBorderCharacters","stripAnsi","toArray","commandModule","yargs","options","gasReport","runGasReport","error","compare","compareGasReport","entry","prevEntry","e","printGasReport","saveGasReport","ts_default","logs","chunk","lines","gasReportPattern","testFunctionPattern","testFilePattern","nearestLine","pattern","startIndex","i","line","matches","gasUsed","name","testFunctionLineIndex","testFileLineIndex","functionMatches","fileMatches","test","file","a","b","headers","values","diff","diffEntry","compareColumns","gasUsedEntry","rows","path"]}