import{a as u}from"../../chunk-BZ6EK2LH.js";import{renderArguments as c,renderList as y,renderedSolidityHeader as v,renderImports as D}from"@latticexyz/common/codegen";function h(e){let{imports:r,name:m,functionPrefix:s,functions:o,errors:i}=e;return`
    ${v}

    ${D(r)}

    /**
     * @title ${m}
     * @dev This interface is automatically generated from the corresponding system contract. Do not edit manually.
     */
    interface ${m} {
      ${y(i,({name:n,parameters:a})=>`error ${n}(${c(a)});`)}

      ${y(o,({name:n,parameters:a,stateMutability:f,returnParameters:t})=>`
          function ${s}${n}(
            ${c(a)}
          ) external ${f} ${O(t)};
        `)}
    }
  `}function O(e){return e.length>0?`returns (${c(e)})`:""}import{renderArguments as A,renderedSolidityHeader as j,renderAbsoluteImports as C,renderRelativeImports as N}from"@latticexyz/common/codegen";function I(e){let{interfaceName:r,storeImportPath:m,worldImportPath:s,imports:o}=e,i=r==="IBaseWorld"?[{symbol:"IStore",path:`${m}IStore.sol`},{symbol:"IWorldKernel",path:`${s}IWorldKernel.sol`}]:[{symbol:"IBaseWorld",path:`${s}codegen/interfaces/IBaseWorld.sol`}],n=[...i,...o].map(({symbol:a})=>a);return`
    ${j}

    ${C(i)}

    ${N(o)}

    /**
     * @title ${r}
     * @notice This interface integrates all systems and associated function selectors 
     * that are dynamically registered in the World during deployment.
     * @dev This is an autogenerated file; do not edit manually.
     */
    interface ${r} is ${A(n)} {
    }
  `}import{readFileSync as B}from"fs";import d from"path";import{formatAndWriteSolidity as $,contractToInterface as T}from"@latticexyz/common/codegen";async function J(e,r,m){let s=u(e,r.map(({basename:t})=>t)),o=d.join(m,e.worldgenDirectory),i=r.filter(({basename:t})=>Object.keys(s.systems).includes(t)),n=[];for(let t of i){let b=B(t.path,"utf8"),{functions:g,errors:P,symbolImports:W}=T(b,t.basename),S=W.map(l=>l.path[0]==="."?{symbol:l.symbol,fromPath:d.join(d.dirname(t.path),l.path),usedInPath:o}:{symbol:l.symbol,path:l.path}),p=`I${t.basename}`,{name:w}=s.systems[t.basename],x=h({name:p,functionPrefix:e.namespace===""?"":`${e.namespace}_${w}_`,functions:g,errors:P,imports:S}),R=d.join(o,p+".sol");await $(x,R,"Generated system interface"),n.push({symbol:p,fromPath:`${p}.sol`,usedInPath:"./"})}let a=I({interfaceName:e.worldInterfaceName,imports:n,storeImportPath:e.storeImportPath,worldImportPath:e.worldImportPath}),f=d.join(o,e.worldInterfaceName+".sol");await $(a,f,"Generated system interface")}export{h as renderSystemInterface,I as renderWorld,J as worldgen};
//# sourceMappingURL=index.js.map