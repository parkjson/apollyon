{"version":3,"sources":["../ts/config/resolveWorldConfig.ts"],"sourcesContent":["import { STORE_NAME_MAX_LENGTH, UnrecognizedSystemErrorFactory } from \"@latticexyz/config\";\nimport { StoreConfig } from \"@latticexyz/store\";\nimport { SystemConfig, WorldConfig } from \"./types\";\n\nexport type ResolvedSystemConfig = ReturnType<typeof resolveSystemConfig>;\n\nexport type ResolvedWorldConfig = ReturnType<typeof resolveWorldConfig>;\n\n/**\n * Resolves the world config by combining the default and overridden system configs,\n * filtering out excluded systems, validate system names refer to existing contracts, and\n * splitting the access list into addresses and system names.\n */\nexport function resolveWorldConfig(config: StoreConfig & WorldConfig, existingContracts?: string[]) {\n  // Include contract names ending in \"System\", but not the base \"System\" contract, and not Interfaces\n  const defaultSystemNames =\n    existingContracts?.filter((name) => name.endsWith(\"System\") && name !== \"System\" && !name.match(/^I[A-Z]/)) ?? [];\n  const overriddenSystemNames = Object.keys(config.systems);\n\n  // Validate every key in systems refers to an existing system contract (and is not called \"World\")\n  if (existingContracts) {\n    for (const systemName of overriddenSystemNames) {\n      if (!existingContracts.includes(systemName) || systemName === \"World\") {\n        throw UnrecognizedSystemErrorFactory([\"systems\", systemName], systemName);\n      }\n    }\n  }\n\n  // Combine the default and overridden system names and filter out excluded systems\n  const systemNames = [...new Set([...defaultSystemNames, ...overriddenSystemNames])].filter(\n    (name) => !config.excludeSystems.includes(name)\n  );\n\n  // Resolve the config\n  const resolvedSystems: Record<string, ResolvedSystemConfig> = systemNames.reduce((acc, systemName) => {\n    return {\n      ...acc,\n      [systemName]: resolveSystemConfig(systemName, config.systems[systemName], existingContracts),\n    };\n  }, {});\n\n  return { systems: resolvedSystems };\n}\n\n/**\n * Resolves the system config by combining the default and overridden system configs,\n * @param systemName name of the system\n * @param config optional SystemConfig object, if none is provided the default config is used\n * @param existingContracts optional list of existing contract names, used to validate system names in the access list. If not provided, no validation is performed.\n * @returns ResolvedSystemConfig object\n * Default value for name is `systemName`\n * Default value for registerFunctionSelectors is true\n * Default value for openAccess is true\n * Default value for accessListAddresses is []\n * Default value for accessListSystems is []\n */\nexport function resolveSystemConfig(systemName: string, config?: SystemConfig, existingContracts?: string[]) {\n  const name = (config?.name ?? systemName).slice(0, STORE_NAME_MAX_LENGTH);\n  const registerFunctionSelectors = config?.registerFunctionSelectors ?? true;\n  const openAccess = config?.openAccess ?? true;\n  const accessListAddresses: string[] = [];\n  const accessListSystems: string[] = [];\n  const accessList = config && !config.openAccess ? config.accessList : [];\n\n  // Split the access list into addresses and system names\n  for (const accessListItem of accessList) {\n    if (accessListItem.startsWith(\"0x\")) {\n      accessListAddresses.push(accessListItem);\n    } else {\n      // Validate every system refers to an existing system contract\n      if (existingContracts && !existingContracts.includes(accessListItem)) {\n        throw UnrecognizedSystemErrorFactory([\"systems\", systemName, \"accessList\"], accessListItem);\n      }\n      accessListSystems.push(accessListItem);\n    }\n  }\n\n  return { name, registerFunctionSelectors, openAccess, accessListAddresses, accessListSystems };\n}\n"],"mappings":"AAAA,OAAS,yBAAAA,EAAuB,kCAAAC,MAAsC,qBAa/D,SAASC,EAAmBC,EAAmCC,EAA8B,CAElG,IAAMC,EACJD,GAAmB,OAAQE,GAASA,EAAK,SAAS,QAAQ,GAAKA,IAAS,UAAY,CAACA,EAAK,MAAM,SAAS,CAAC,GAAK,CAAC,EAC5GC,EAAwB,OAAO,KAAKJ,EAAO,OAAO,EAGxD,GAAIC,GACF,QAAWI,KAAcD,EACvB,GAAI,CAACH,EAAkB,SAASI,CAAU,GAAKA,IAAe,QAC5D,MAAMP,EAA+B,CAAC,UAAWO,CAAU,EAAGA,CAAU,EAkB9E,MAAO,CAAE,QAZW,CAAC,GAAG,IAAI,IAAI,CAAC,GAAGH,EAAoB,GAAGE,CAAqB,CAAC,CAAC,EAAE,OACjFD,GAAS,CAACH,EAAO,eAAe,SAASG,CAAI,CAChD,EAG0E,OAAO,CAACG,EAAKD,KAC9E,CACL,GAAGC,EACH,CAACD,CAAU,EAAGE,EAAoBF,EAAYL,EAAO,QAAQK,CAAU,EAAGJ,CAAiB,CAC7F,GACC,CAAC,CAAC,CAE6B,CACpC,CAcO,SAASM,EAAoBF,EAAoBL,EAAuBC,EAA8B,CAC3G,IAAME,GAAQH,GAAQ,MAAQK,GAAY,MAAM,EAAGR,CAAqB,EAClEW,EAA4BR,GAAQ,2BAA6B,GACjES,EAAaT,GAAQ,YAAc,GACnCU,EAAgC,CAAC,EACjCC,EAA8B,CAAC,EAC/BC,EAAaZ,GAAU,CAACA,EAAO,WAAaA,EAAO,WAAa,CAAC,EAGvE,QAAWa,KAAkBD,EAC3B,GAAIC,EAAe,WAAW,IAAI,EAChCH,EAAoB,KAAKG,CAAc,MAClC,CAEL,GAAIZ,GAAqB,CAACA,EAAkB,SAASY,CAAc,EACjE,MAAMf,EAA+B,CAAC,UAAWO,EAAY,YAAY,EAAGQ,CAAc,EAE5FF,EAAkB,KAAKE,CAAc,EAIzC,MAAO,CAAE,KAAAV,EAAM,0BAAAK,EAA2B,WAAAC,EAAY,oBAAAC,EAAqB,kBAAAC,CAAkB,CAC/F","names":["STORE_NAME_MAX_LENGTH","UnrecognizedSystemErrorFactory","resolveWorldConfig","config","existingContracts","defaultSystemNames","name","overriddenSystemNames","systemName","acc","resolveSystemConfig","registerFunctionSelectors","openAccess","accessListAddresses","accessListSystems","accessList","accessListItem"]}