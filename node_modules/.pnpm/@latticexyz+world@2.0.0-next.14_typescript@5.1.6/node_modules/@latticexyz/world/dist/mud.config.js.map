{"version":3,"sources":["../mud.config.ts"],"sourcesContent":["import { mudConfig } from \"./ts/register\";\n\nexport default mudConfig({\n  worldImportPath: \"../../\",\n  worldgenDirectory: \"interfaces\",\n  worldInterfaceName: \"IBaseWorld\",\n  namespace: \"world\" as const, // NOTE: this namespace is only used for tables, the core system is deployed in the root namespace.\n  userTypes: {\n    ResourceId: { filePath: \"@latticexyz/store/src/ResourceId.sol\", internalType: \"bytes32\" },\n  },\n  tables: {\n    NamespaceOwner: {\n      keySchema: {\n        namespaceId: \"ResourceId\",\n      },\n      valueSchema: {\n        owner: \"address\",\n      },\n    },\n    ResourceAccess: {\n      keySchema: {\n        resourceId: \"ResourceId\",\n        caller: \"address\",\n      },\n      valueSchema: {\n        access: \"bool\",\n      },\n    },\n    InstalledModules: {\n      keySchema: {\n        moduleName: \"bytes16\",\n        argumentsHash: \"bytes32\", // Hash of the params passed to the `install` function\n      },\n      valueSchema: {\n        moduleAddress: \"address\",\n      },\n    },\n    UserDelegationControl: {\n      keySchema: {\n        delegator: \"address\",\n        delegatee: \"address\",\n      },\n      valueSchema: {\n        delegationControlId: \"ResourceId\",\n      },\n    },\n    NamespaceDelegationControl: {\n      keySchema: {\n        namespaceId: \"ResourceId\",\n      },\n      valueSchema: {\n        delegationControlId: \"ResourceId\",\n      },\n    },\n    Balances: {\n      keySchema: {\n        namespaceId: \"ResourceId\",\n      },\n      valueSchema: {\n        balance: \"uint256\",\n      },\n    },\n    Systems: {\n      keySchema: {\n        systemId: \"ResourceId\",\n      },\n      valueSchema: {\n        system: \"address\",\n        publicAccess: \"bool\",\n      },\n      dataStruct: false,\n    },\n    SystemRegistry: {\n      keySchema: {\n        system: \"address\",\n      },\n      valueSchema: {\n        systemId: \"ResourceId\",\n      },\n    },\n    SystemHooks: {\n      keySchema: {\n        systemId: \"ResourceId\",\n      },\n      valueSchema: \"bytes21[]\",\n    },\n    FunctionSelectors: {\n      keySchema: {\n        functionSelector: \"bytes4\",\n      },\n      valueSchema: {\n        systemId: \"ResourceId\",\n        systemFunctionSelector: \"bytes4\",\n      },\n      dataStruct: false,\n    },\n    FunctionSignatures: {\n      keySchema: {\n        functionSelector: \"bytes4\",\n      },\n      valueSchema: {\n        functionSignature: \"string\",\n      },\n      offchainOnly: true,\n    },\n  },\n  excludeSystems: [\n    // Worldgen currently does not support systems inheriting logic\n    // from other contracts, so all parts of CoreSystem are named\n    // System too to be included in the IBaseWorld interface.\n    // However, IStoreRegistrationSystem overlaps with IStore if\n    // included in IBaseWorld, so it needs to be excluded from worldgen.\n    // TODO: add support for inheritance to worldgen\n    // (see: https://github.com/latticexyz/mud/issues/631)\n    \"StoreRegistrationSystem\",\n  ],\n});\n"],"mappings":"oEAEA,IAAOA,EAAQC,EAAU,CACvB,gBAAiB,SACjB,kBAAmB,aACnB,mBAAoB,aACpB,UAAW,QACX,UAAW,CACT,WAAY,CAAE,SAAU,uCAAwC,aAAc,SAAU,CAC1F,EACA,OAAQ,CACN,eAAgB,CACd,UAAW,CACT,YAAa,YACf,EACA,YAAa,CACX,MAAO,SACT,CACF,EACA,eAAgB,CACd,UAAW,CACT,WAAY,aACZ,OAAQ,SACV,EACA,YAAa,CACX,OAAQ,MACV,CACF,EACA,iBAAkB,CAChB,UAAW,CACT,WAAY,UACZ,cAAe,SACjB,EACA,YAAa,CACX,cAAe,SACjB,CACF,EACA,sBAAuB,CACrB,UAAW,CACT,UAAW,UACX,UAAW,SACb,EACA,YAAa,CACX,oBAAqB,YACvB,CACF,EACA,2BAA4B,CAC1B,UAAW,CACT,YAAa,YACf,EACA,YAAa,CACX,oBAAqB,YACvB,CACF,EACA,SAAU,CACR,UAAW,CACT,YAAa,YACf,EACA,YAAa,CACX,QAAS,SACX,CACF,EACA,QAAS,CACP,UAAW,CACT,SAAU,YACZ,EACA,YAAa,CACX,OAAQ,UACR,aAAc,MAChB,EACA,WAAY,EACd,EACA,eAAgB,CACd,UAAW,CACT,OAAQ,SACV,EACA,YAAa,CACX,SAAU,YACZ,CACF,EACA,YAAa,CACX,UAAW,CACT,SAAU,YACZ,EACA,YAAa,WACf,EACA,kBAAmB,CACjB,UAAW,CACT,iBAAkB,QACpB,EACA,YAAa,CACX,SAAU,aACV,uBAAwB,QAC1B,EACA,WAAY,EACd,EACA,mBAAoB,CAClB,UAAW,CACT,iBAAkB,QACpB,EACA,YAAa,CACX,kBAAmB,QACrB,EACA,aAAc,EAChB,CACF,EACA,eAAgB,CAQd,yBACF,CACF,CAAC","names":["mud_config_default","mudConfig"]}