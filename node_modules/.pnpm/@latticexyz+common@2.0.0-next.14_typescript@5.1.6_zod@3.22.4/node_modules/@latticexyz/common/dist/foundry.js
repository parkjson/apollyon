import{execa as s}from"execa";async function n(r){let{stdout:t}=await s("forge",["config","--json"],{stdio:["inherit","pipe","pipe"],env:{FOUNDRY_PROFILE:r}});return JSON.parse(t)}async function u(r){return(await n(r)).src}async function f(r){return(await n(r)).script}async function l(r){return(await n(r)).test}async function m(r){return(await n(r)).out}async function y(r){return(await n(r)).eth_rpc_url||"http://127.0.0.1:8545"}async function P(r){return(await n(r)).remappings.map(t=>t.trim().split("="))}async function x(r,t){let i={env:{FOUNDRY_PROFILE:t?.profile,...t?.env},stdout:"inherit",stderr:"pipe"};await(t?.silent?s("forge",r,i):o("forge",r,i))}async function w(r,t){return o("cast",r,{env:{FOUNDRY_PROFILE:t?.profile}})}async function O(r){return o("anvil",r)}async function o(r,t,i){let g=`${r} ${t.join(" ")}`;try{console.log(`running "${g}"`);let{stdout:e}=await s(r,t,{stdout:"pipe",stderr:"pipe",...i});return e}catch(e){let c=e?.stderr||e?.message||"";throw c+=`
Error running "${g}"`,new Error(c)}}export{O as anvil,w as cast,x as forge,n as getForgeConfig,m as getOutDirectory,P as getRemappings,y as getRpcUrl,f as getScriptDirectory,u as getSrcDirectory,l as getTestDirectory};
//# sourceMappingURL=foundry.js.map