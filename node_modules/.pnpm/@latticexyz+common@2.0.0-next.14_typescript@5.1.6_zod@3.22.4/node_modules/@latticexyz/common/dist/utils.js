function o(e,r){throw new Error(r??`Unexpected value: ${e}`)}function i(...e){return e.reduce((r,t)=>t>r?t:r)}function s(...e){return e.reduce((r,t)=>t<r?t:r)}function m(e,r){return e<r?-1:e>r?1:0}function*c(e,r){for(let t=0;t<e.length;t+=r)yield e.slice(t,t+r)}function l(e,...r){return(...t)=>e(...r,...t)}function d(e){return e}function P(e){return e!==void 0}function v(e){return e!==null}async function k(e){let r=[];for await(let t of e)r.push(t);return r}function S(e,r){return Object.fromEntries(Object.entries(e).map(([t,n])=>[t,r(n,t)]))}function I(e,r){let t=new Map;for(let n of e)t.set(r(n),n);return Array.from(t.values())}function R(e){return new Promise(r=>setTimeout(()=>r(),e))}function j(){return new Promise(e=>{requestIdleCallback(()=>e())})}export{o as assertExhaustive,i as bigIntMax,s as bigIntMin,m as bigIntSort,c as chunk,l as curry,d as identity,P as isDefined,v as isNotNull,k as iteratorToArray,S as mapObject,I as uniqueBy,R as wait,j as waitForIdle};
//# sourceMappingURL=utils.js.map