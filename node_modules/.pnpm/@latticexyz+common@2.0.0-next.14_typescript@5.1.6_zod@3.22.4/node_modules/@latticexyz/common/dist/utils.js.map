{"version":3,"sources":["../src/utils/assertExhaustive.ts","../src/utils/bigIntMax.ts","../src/utils/bigIntMin.ts","../src/utils/bigIntSort.ts","../src/utils/chunk.ts","../src/utils/curry.ts","../src/utils/identity.ts","../src/utils/isDefined.ts","../src/utils/isNotNull.ts","../src/utils/iteratorToArray.ts","../src/utils/mapObject.ts","../src/utils/uniqueBy.ts","../src/utils/wait.ts","../src/utils/waitForIdle.ts"],"sourcesContent":["export function assertExhaustive(value: never, message?: string): never {\n  throw new Error(message ?? `Unexpected value: ${value}`);\n}\n","export function bigIntMax(...args: bigint[]): bigint {\n  return args.reduce((m, e) => (e > m ? e : m));\n}\n","export function bigIntMin(...args: bigint[]): bigint {\n  return args.reduce((m, e) => (e < m ? e : m));\n}\n","export function bigIntSort(a: bigint, b: bigint): -1 | 0 | 1 {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n","export function* chunk<T>(arr: T[], n: number): Generator<T[], void> {\n  for (let i = 0; i < arr.length; i += n) {\n    yield arr.slice(i, i + n);\n  }\n}\n","export function curry<F extends (...params: [...P, ...any[]]) => any, P extends any[]>(\n  func: F,\n  ...partialParams: P\n): CurryParams<F, P> {\n  return ((...args: any[]) => func(...partialParams, ...args)) as CurryParams<F, P>;\n}\n\ntype CurryParams<F extends (...params: [...PartialParams, ...any[]]) => any, PartialParams extends any[]> = F extends (\n  ...params: [...PartialParams, ...infer RemainingParams]\n) => infer Result\n  ? (...params: RemainingParams) => Result\n  : never;\n","export function identity<T>(value: T): T {\n  return value;\n}\n","export function isDefined<T>(argument: T | undefined): argument is T {\n  return argument !== undefined;\n}\n","export function isNotNull<T>(argument: T | null): argument is T {\n  return argument !== null;\n}\n","export async function iteratorToArray<T>(iterator: AsyncIterable<T>): Promise<T[]> {\n  const items: T[] = [];\n  for await (const item of iterator) {\n    items.push(item);\n  }\n  return items;\n}\n","/**\n * Map each key of a source object via a given valueMap function\n */\nexport function mapObject<\n  Source extends Record<string | number | symbol, unknown>,\n  Target extends { [key in keyof Source]: unknown }\n>(source: Source, valueMap: (value: Source[typeof key], key: keyof Source) => Target[typeof key]): Target {\n  return Object.fromEntries(\n    Object.entries(source).map(([key, value]) => [key, valueMap(value as Source[keyof Source], key)])\n  ) as Target;\n}\n","export function uniqueBy<value, key>(values: readonly value[], getKey: (value: value) => key): readonly value[] {\n  const map = new Map<key, value>();\n  for (const value of values) {\n    map.set(getKey(value), value);\n  }\n  return Array.from(map.values());\n}\n","export function wait(ms: number): Promise<void> {\n  return new Promise<void>((resolve) => setTimeout(() => resolve(), ms));\n}\n","export function waitForIdle(): Promise<void> {\n  return new Promise<void>((resolve) => {\n    requestIdleCallback(() => resolve());\n  });\n}\n"],"mappings":"AAAO,SAASA,EAAiBC,EAAcC,EAAyB,CACtE,MAAM,IAAI,MAAMA,GAAW,qBAAqBD,GAAO,CACzD,CCFO,SAASE,KAAaC,EAAwB,CACnD,OAAOA,EAAK,OAAO,CAACC,EAAGC,IAAOA,EAAID,EAAIC,EAAID,CAAE,CAC9C,CCFO,SAASE,KAAaC,EAAwB,CACnD,OAAOA,EAAK,OAAO,CAACC,EAAGC,IAAOA,EAAID,EAAIC,EAAID,CAAE,CAC9C,CCFO,SAASE,EAAWC,EAAWC,EAAuB,CAC3D,OAAOD,EAAIC,EAAI,GAAKD,EAAIC,EAAI,EAAI,CAClC,CCFO,SAAUC,EAASC,EAAUC,EAAiC,CACnE,QAASC,EAAI,EAAGA,EAAIF,EAAI,OAAQE,GAAKD,EACnC,MAAMD,EAAI,MAAME,EAAGA,EAAID,CAAC,CAE5B,CCJO,SAASE,EACdC,KACGC,EACgB,CACnB,MAAQ,IAAIC,IAAgBF,EAAK,GAAGC,EAAe,GAAGC,CAAI,CAC5D,CCLO,SAASC,EAAYC,EAAa,CACvC,OAAOA,CACT,CCFO,SAASC,EAAaC,EAAwC,CACnE,OAAOA,IAAa,MACtB,CCFO,SAASC,EAAaC,EAAmC,CAC9D,OAAOA,IAAa,IACtB,CCFA,eAAsBC,EAAmBC,EAA0C,CACjF,IAAMC,EAAa,CAAC,EACpB,cAAiBC,KAAQF,EACvBC,EAAM,KAAKC,CAAI,EAEjB,OAAOD,CACT,CCHO,SAASE,EAGdC,EAAgBC,EAAwF,CACxG,OAAO,OAAO,YACZ,OAAO,QAAQD,CAAM,EAAE,IAAI,CAAC,CAACE,EAAKC,CAAK,IAAM,CAACD,EAAKD,EAASE,EAA+BD,CAAG,CAAC,CAAC,CAClG,CACF,CCVO,SAASE,EAAqBC,EAA0BC,EAAiD,CAC9G,IAAMC,EAAM,IAAI,IAChB,QAAWC,KAASH,EAClBE,EAAI,IAAID,EAAOE,CAAK,EAAGA,CAAK,EAE9B,OAAO,MAAM,KAAKD,EAAI,OAAO,CAAC,CAChC,CCNO,SAASE,EAAKC,EAA2B,CAC9C,OAAO,IAAI,QAAeC,GAAY,WAAW,IAAMA,EAAQ,EAAGD,CAAE,CAAC,CACvE,CCFO,SAASE,GAA6B,CAC3C,OAAO,IAAI,QAAeC,GAAY,CACpC,oBAAoB,IAAMA,EAAQ,CAAC,CACrC,CAAC,CACH","names":["assertExhaustive","value","message","bigIntMax","args","m","e","bigIntMin","args","m","e","bigIntSort","a","b","chunk","arr","n","i","curry","func","partialParams","args","identity","value","isDefined","argument","isNotNull","argument","iteratorToArray","iterator","items","item","mapObject","source","valueMap","key","value","uniqueBy","values","getKey","map","value","wait","ms","resolve","waitForIdle","resolve"]}