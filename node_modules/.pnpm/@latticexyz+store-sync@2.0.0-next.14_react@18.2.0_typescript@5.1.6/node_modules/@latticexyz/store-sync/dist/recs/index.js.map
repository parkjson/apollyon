{"version":3,"sources":["../../src/recs/decodeEntity.ts","../../src/recs/entityToHexKeyTuple.ts","../../src/recs/encodeEntity.ts","../../src/recs/hexKeyTupleToEntity.ts","../../src/recs/isStoreComponent.ts","../../src/recs/recsStorage.ts","../../src/recs/debug.ts","../../src/recs/defineInternalComponents.ts","../../src/recs/getTableEntity.ts","../../src/recs/singletonEntity.ts","../../src/recs/tableToComponent.ts","../../src/recs/schemaAbiTypeToRecsType.ts","../../src/recs/tablesToComponents.ts","../../src/recs/syncToRecs.ts"],"sourcesContent":["import { Entity } from \"@latticexyz/recs\";\nimport { Hex, decodeAbiParameters } from \"viem\";\nimport { entityToHexKeyTuple } from \"./entityToHexKeyTuple\";\nimport { KeySchema, SchemaToPrimitives } from \"@latticexyz/protocol-parser\";\n\nexport function decodeEntity<TKeySchema extends KeySchema>(\n  keySchema: TKeySchema,\n  entity: Entity\n): SchemaToPrimitives<TKeySchema> {\n  const hexKeyTuple = entityToHexKeyTuple(entity);\n  if (hexKeyTuple.length !== Object.keys(keySchema).length) {\n    throw new Error(\n      `entity key tuple length ${hexKeyTuple.length} does not match key schema length ${Object.keys(keySchema).length}`\n    );\n  }\n  return Object.fromEntries(\n    Object.entries(keySchema).map(([key, type], index) => [\n      key,\n      decodeAbiParameters([{ type }], hexKeyTuple[index] as Hex)[0],\n    ])\n  ) as SchemaToPrimitives<TKeySchema>;\n}\n","import { Entity } from \"@latticexyz/recs\";\nimport { Hex, sliceHex, size, isHex } from \"viem\";\n\nexport function entityToHexKeyTuple(entity: Entity): readonly Hex[] {\n  if (!isHex(entity)) {\n    throw new Error(`entity ${entity} is not a hex string`);\n  }\n  const length = size(entity);\n  if (length % 32 !== 0) {\n    throw new Error(`entity length ${length} is not a multiple of 32 bytes`);\n  }\n  return new Array(length / 32).fill(0).map((_, index) => sliceHex(entity, index * 32, (index + 1) * 32));\n}\n","import { Entity } from \"@latticexyz/recs\";\nimport { encodeAbiParameters } from \"viem\";\nimport { hexKeyTupleToEntity } from \"./hexKeyTupleToEntity\";\nimport { KeySchema, SchemaToPrimitives } from \"@latticexyz/protocol-parser\";\n\nexport function encodeEntity<TKeySchema extends KeySchema>(\n  keySchema: TKeySchema,\n  key: SchemaToPrimitives<TKeySchema>\n): Entity {\n  if (Object.keys(keySchema).length !== Object.keys(key).length) {\n    throw new Error(\n      `key length ${Object.keys(key).length} does not match key schema length ${Object.keys(keySchema).length}`\n    );\n  }\n  return hexKeyTupleToEntity(\n    Object.entries(keySchema).map(([keyName, type]) => encodeAbiParameters([{ type }], [key[keyName]]))\n  );\n}\n","import { Entity } from \"@latticexyz/recs\";\nimport { Hex, concatHex } from \"viem\";\n\nexport function hexKeyTupleToEntity(hexKeyTuple: readonly Hex[]): Entity {\n  return concatHex(hexKeyTuple as Hex[]) as Entity;\n}\n","import { Component, Schema } from \"@latticexyz/recs\";\nimport { StoreComponentMetadata } from \"./common\";\n\nexport function isStoreComponent<S extends Schema = Schema>(\n  component: Component<S>\n): component is Component<S, StoreComponentMetadata> {\n  return (\n    component.metadata?.componentName != null &&\n    component.metadata?.tableName != null &&\n    component.metadata?.keySchema != null &&\n    component.metadata?.valueSchema != null\n  );\n}\n","import { Table, resolveConfig } from \"@latticexyz/store\";\nimport { debug } from \"./debug\";\nimport { World as RecsWorld, getComponentValue, hasComponent, removeComponent, setComponent } from \"@latticexyz/recs\";\nimport { defineInternalComponents } from \"./defineInternalComponents\";\nimport { getTableEntity } from \"./getTableEntity\";\nimport { hexToResource, spliceHex } from \"@latticexyz/common\";\nimport { decodeValueArgs } from \"@latticexyz/protocol-parser\";\nimport { Hex, size } from \"viem\";\nimport { isTableRegistrationLog } from \"../isTableRegistrationLog\";\nimport { logToTable } from \"../logToTable\";\nimport { hexKeyTupleToEntity } from \"./hexKeyTupleToEntity\";\nimport { StorageAdapter, StorageAdapterBlock } from \"../common\";\nimport { singletonEntity } from \"./singletonEntity\";\nimport storeConfig from \"@latticexyz/store/mud.config\";\nimport worldConfig from \"@latticexyz/world/mud.config\";\nimport { TablesToComponents, tablesToComponents } from \"./tablesToComponents\";\n\nconst storeTables = resolveConfig(storeConfig).tables;\nconst worldTables = resolveConfig(worldConfig).tables;\n\nexport type RecsStorageOptions<tables extends Record<string, Table>> = {\n  world: RecsWorld;\n  tables: tables;\n  shouldSkipUpdateStream?: () => boolean;\n};\n\nexport type RecsStorageAdapter<tables extends Record<string, Table>> = {\n  storageAdapter: StorageAdapter;\n  components: TablesToComponents<tables> &\n    TablesToComponents<typeof storeTables> &\n    TablesToComponents<typeof worldTables> &\n    ReturnType<typeof defineInternalComponents>;\n};\n\nexport function recsStorage<tables extends Record<string, Table>>({\n  world,\n  tables,\n  shouldSkipUpdateStream,\n}: RecsStorageOptions<tables>): RecsStorageAdapter<tables> {\n  world.registerEntity({ id: singletonEntity });\n\n  const components = {\n    ...tablesToComponents(world, tables),\n    ...tablesToComponents(world, storeTables),\n    ...tablesToComponents(world, worldTables),\n    ...defineInternalComponents(world),\n  };\n\n  async function recsStorageAdapter({ logs }: StorageAdapterBlock): Promise<void> {\n    const newTables = logs.filter(isTableRegistrationLog).map(logToTable);\n    for (const newTable of newTables) {\n      const tableEntity = getTableEntity(newTable);\n      if (hasComponent(components.RegisteredTables, tableEntity)) {\n        console.warn(\"table already registered, ignoring\", {\n          newTable,\n          existingTable: getComponentValue(components.RegisteredTables, tableEntity)?.table,\n        });\n      } else {\n        setComponent(\n          components.RegisteredTables,\n          tableEntity,\n          { table: newTable },\n          { skipUpdateStream: shouldSkipUpdateStream?.() }\n        );\n      }\n    }\n\n    for (const log of logs) {\n      const { namespace, name } = hexToResource(log.args.tableId);\n      const table = getComponentValue(\n        components.RegisteredTables,\n        getTableEntity({ address: log.address, namespace, name })\n      )?.table;\n      if (!table) {\n        debug(`skipping update for unknown table: ${namespace}:${name} at ${log.address}`);\n        continue;\n      }\n\n      const component = world.components.find((c) => c.id === table.tableId);\n      if (!component) {\n        debug(\n          `skipping update for unknown component: ${table.tableId} (${table.namespace}:${\n            table.name\n          }). Available components: ${Object.keys(components)}`\n        );\n        continue;\n      }\n\n      const entity = hexKeyTupleToEntity(log.args.keyTuple);\n\n      if (log.eventName === \"Store_SetRecord\") {\n        const value = decodeValueArgs(table.valueSchema, log.args);\n        debug(\"setting component\", {\n          namespace: table.namespace,\n          name: table.name,\n          entity,\n          value,\n        });\n        setComponent(\n          component,\n          entity,\n          {\n            ...value,\n            __staticData: log.args.staticData,\n            __encodedLengths: log.args.encodedLengths,\n            __dynamicData: log.args.dynamicData,\n          },\n          { skipUpdateStream: shouldSkipUpdateStream?.() }\n        );\n      } else if (log.eventName === \"Store_SpliceStaticData\") {\n        // TODO: add tests that this works when no record had been set before\n        const previousValue = getComponentValue(component, entity);\n        const previousStaticData = (previousValue?.__staticData as Hex) ?? \"0x\";\n        const newStaticData = spliceHex(previousStaticData, log.args.start, size(log.args.data), log.args.data);\n        const newValue = decodeValueArgs(table.valueSchema, {\n          staticData: newStaticData,\n          encodedLengths: (previousValue?.__encodedLengths as Hex) ?? \"0x\",\n          dynamicData: (previousValue?.__dynamicData as Hex) ?? \"0x\",\n        });\n        debug(\"setting component via splice static\", {\n          namespace: table.namespace,\n          name: table.name,\n          entity,\n          previousStaticData,\n          newStaticData,\n          previousValue,\n          newValue,\n        });\n        setComponent(\n          component,\n          entity,\n          {\n            ...newValue,\n            __staticData: newStaticData,\n          },\n          { skipUpdateStream: shouldSkipUpdateStream?.() }\n        );\n      } else if (log.eventName === \"Store_SpliceDynamicData\") {\n        // TODO: add tests that this works when no record had been set before\n        const previousValue = getComponentValue(component, entity);\n        const previousDynamicData = (previousValue?.__dynamicData as Hex) ?? \"0x\";\n        const newDynamicData = spliceHex(previousDynamicData, log.args.start, log.args.deleteCount, log.args.data);\n        const newValue = decodeValueArgs(table.valueSchema, {\n          staticData: (previousValue?.__staticData as Hex) ?? \"0x\",\n          // TODO: handle unchanged encoded lengths\n          encodedLengths: log.args.encodedLengths,\n          dynamicData: newDynamicData,\n        });\n        debug(\"setting component via splice dynamic\", {\n          namespace: table.namespace,\n          name: table.name,\n          entity,\n          previousDynamicData,\n          newDynamicData,\n          previousValue,\n          newValue,\n        });\n        setComponent(\n          component,\n          entity,\n          {\n            ...newValue,\n            __encodedLengths: log.args.encodedLengths,\n            __dynamicData: newDynamicData,\n          },\n          { skipUpdateStream: shouldSkipUpdateStream?.() }\n        );\n      } else if (log.eventName === \"Store_DeleteRecord\") {\n        debug(\"deleting component\", {\n          namespace: table.namespace,\n          name: table.name,\n          entity,\n        });\n        removeComponent(component, entity, { skipUpdateStream: shouldSkipUpdateStream?.() });\n      }\n    }\n  }\n\n  return { storageAdapter: recsStorageAdapter, components };\n}\n","import { debug as parentDebug } from \"../debug\";\n\nexport const debug = parentDebug.extend(\"recs\");\n","import { World, defineComponent, Type, Component, Schema, Metadata } from \"@latticexyz/recs\";\nimport { Table } from \"../common\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function defineInternalComponents(world: World) {\n  return {\n    RegisteredTables: defineComponent<{ table: Type.T }, Metadata, Table>(\n      world,\n      { table: Type.T },\n      { metadata: { componentName: \"RegisteredTables\" } }\n    ),\n    SyncProgress: defineComponent(\n      world,\n      {\n        step: Type.String,\n        message: Type.String,\n        percentage: Type.Number,\n        latestBlockNumber: Type.BigInt,\n        lastBlockNumberProcessed: Type.BigInt,\n      },\n      { metadata: { componentName: \"SyncProgress\" } }\n    ),\n  } as const satisfies Record<string, Component<Schema, Metadata>>;\n}\n","import { stringToHex } from \"viem\";\nimport { Table } from \"../common\";\nimport { Entity } from \"@latticexyz/recs\";\nimport { encodeEntity } from \"./encodeEntity\";\n\nexport function getTableEntity(table: Pick<Table, \"address\" | \"namespace\" | \"name\">): Entity {\n  return encodeEntity(\n    { address: \"address\", namespace: \"bytes16\", name: \"bytes16\" },\n    {\n      address: table.address,\n      namespace: stringToHex(table.namespace, { size: 16 }),\n      name: stringToHex(table.name, { size: 16 }),\n    }\n  );\n}\n","import { hexKeyTupleToEntity } from \"./hexKeyTupleToEntity\";\n\nexport const singletonEntity = hexKeyTupleToEntity([]);\n","import { Component, Type, World, defineComponent } from \"@latticexyz/recs\";\nimport { StoreComponentMetadata } from \"./common\";\nimport { SchemaAbiTypeToRecsType, schemaAbiTypeToRecsType } from \"./schemaAbiTypeToRecsType\";\nimport { SchemaAbiType } from \"@latticexyz/schema-type\";\nimport { Table } from \"@latticexyz/store\";\nimport { mapObject } from \"@latticexyz/common/utils\";\n\nexport type TableToComponent<table extends Table> = Component<\n  {\n    __staticData: Type.OptionalString;\n    __encodedLengths: Type.OptionalString;\n    __dynamicData: Type.OptionalString;\n  } & {\n    [fieldName in keyof table[\"valueSchema\"] & string]: Type &\n      SchemaAbiTypeToRecsType<SchemaAbiType & table[\"valueSchema\"][fieldName][\"type\"]>;\n  },\n  StoreComponentMetadata & {\n    componentName: table[\"name\"];\n    tableName: `${table[\"namespace\"]}:${table[\"name\"]}`;\n    keySchema: { [name in keyof table[\"keySchema\"] & string]: table[\"keySchema\"][name][\"type\"] };\n    valueSchema: { [name in keyof table[\"valueSchema\"] & string]: table[\"valueSchema\"][name][\"type\"] };\n  }\n>;\n\nexport function tableToComponent<table extends Table>(world: World, table: table): TableToComponent<table> {\n  return defineComponent(\n    world,\n    {\n      ...Object.fromEntries(\n        Object.entries(table.valueSchema).map(([fieldName, { type: schemaAbiType }]) => [\n          fieldName,\n          schemaAbiTypeToRecsType[schemaAbiType as SchemaAbiType],\n        ])\n      ),\n      __staticData: Type.OptionalString,\n      __encodedLengths: Type.OptionalString,\n      __dynamicData: Type.OptionalString,\n    },\n    {\n      id: table.tableId,\n      metadata: {\n        componentName: table.name,\n        tableName: `${table.namespace}:${table.name}`,\n        keySchema: mapObject(table.keySchema, ({ type }) => type),\n        valueSchema: mapObject(table.valueSchema, ({ type }) => type),\n      },\n    }\n  ) as TableToComponent<table>;\n}\n","import { Type as RecsType } from \"@latticexyz/recs\";\nimport { SchemaAbiType } from \"@latticexyz/schema-type\";\n\nexport const schemaAbiTypeToRecsType = {\n  uint8: RecsType.Number,\n  uint16: RecsType.Number,\n  uint24: RecsType.Number,\n  uint32: RecsType.Number,\n  uint40: RecsType.Number,\n  uint48: RecsType.Number,\n  uint56: RecsType.BigInt,\n  uint64: RecsType.BigInt,\n  uint72: RecsType.BigInt,\n  uint80: RecsType.BigInt,\n  uint88: RecsType.BigInt,\n  uint96: RecsType.BigInt,\n  uint104: RecsType.BigInt,\n  uint112: RecsType.BigInt,\n  uint120: RecsType.BigInt,\n  uint128: RecsType.BigInt,\n  uint136: RecsType.BigInt,\n  uint144: RecsType.BigInt,\n  uint152: RecsType.BigInt,\n  uint160: RecsType.BigInt,\n  uint168: RecsType.BigInt,\n  uint176: RecsType.BigInt,\n  uint184: RecsType.BigInt,\n  uint192: RecsType.BigInt,\n  uint200: RecsType.BigInt,\n  uint208: RecsType.BigInt,\n  uint216: RecsType.BigInt,\n  uint224: RecsType.BigInt,\n  uint232: RecsType.BigInt,\n  uint240: RecsType.BigInt,\n  uint248: RecsType.BigInt,\n  uint256: RecsType.BigInt,\n  int8: RecsType.Number,\n  int16: RecsType.Number,\n  int24: RecsType.Number,\n  int32: RecsType.Number,\n  int40: RecsType.Number,\n  int48: RecsType.Number,\n  int56: RecsType.BigInt,\n  int64: RecsType.BigInt,\n  int72: RecsType.BigInt,\n  int80: RecsType.BigInt,\n  int88: RecsType.BigInt,\n  int96: RecsType.BigInt,\n  int104: RecsType.BigInt,\n  int112: RecsType.BigInt,\n  int120: RecsType.BigInt,\n  int128: RecsType.BigInt,\n  int136: RecsType.BigInt,\n  int144: RecsType.BigInt,\n  int152: RecsType.BigInt,\n  int160: RecsType.BigInt,\n  int168: RecsType.BigInt,\n  int176: RecsType.BigInt,\n  int184: RecsType.BigInt,\n  int192: RecsType.BigInt,\n  int200: RecsType.BigInt,\n  int208: RecsType.BigInt,\n  int216: RecsType.BigInt,\n  int224: RecsType.BigInt,\n  int232: RecsType.BigInt,\n  int240: RecsType.BigInt,\n  int248: RecsType.BigInt,\n  int256: RecsType.BigInt,\n  bytes1: RecsType.String,\n  bytes2: RecsType.String,\n  bytes3: RecsType.String,\n  bytes4: RecsType.String,\n  bytes5: RecsType.String,\n  bytes6: RecsType.String,\n  bytes7: RecsType.String,\n  bytes8: RecsType.String,\n  bytes9: RecsType.String,\n  bytes10: RecsType.String,\n  bytes11: RecsType.String,\n  bytes12: RecsType.String,\n  bytes13: RecsType.String,\n  bytes14: RecsType.String,\n  bytes15: RecsType.String,\n  bytes16: RecsType.String,\n  bytes17: RecsType.String,\n  bytes18: RecsType.String,\n  bytes19: RecsType.String,\n  bytes20: RecsType.String,\n  bytes21: RecsType.String,\n  bytes22: RecsType.String,\n  bytes23: RecsType.String,\n  bytes24: RecsType.String,\n  bytes25: RecsType.String,\n  bytes26: RecsType.String,\n  bytes27: RecsType.String,\n  bytes28: RecsType.String,\n  bytes29: RecsType.String,\n  bytes30: RecsType.String,\n  bytes31: RecsType.String,\n  bytes32: RecsType.String,\n  bool: RecsType.Boolean,\n  address: RecsType.String,\n  \"uint8[]\": RecsType.NumberArray,\n  \"uint16[]\": RecsType.NumberArray,\n  \"uint24[]\": RecsType.NumberArray,\n  \"uint32[]\": RecsType.NumberArray,\n  \"uint40[]\": RecsType.NumberArray,\n  \"uint48[]\": RecsType.NumberArray,\n  \"uint56[]\": RecsType.BigIntArray,\n  \"uint64[]\": RecsType.BigIntArray,\n  \"uint72[]\": RecsType.BigIntArray,\n  \"uint80[]\": RecsType.BigIntArray,\n  \"uint88[]\": RecsType.BigIntArray,\n  \"uint96[]\": RecsType.BigIntArray,\n  \"uint104[]\": RecsType.BigIntArray,\n  \"uint112[]\": RecsType.BigIntArray,\n  \"uint120[]\": RecsType.BigIntArray,\n  \"uint128[]\": RecsType.BigIntArray,\n  \"uint136[]\": RecsType.BigIntArray,\n  \"uint144[]\": RecsType.BigIntArray,\n  \"uint152[]\": RecsType.BigIntArray,\n  \"uint160[]\": RecsType.BigIntArray,\n  \"uint168[]\": RecsType.BigIntArray,\n  \"uint176[]\": RecsType.BigIntArray,\n  \"uint184[]\": RecsType.BigIntArray,\n  \"uint192[]\": RecsType.BigIntArray,\n  \"uint200[]\": RecsType.BigIntArray,\n  \"uint208[]\": RecsType.BigIntArray,\n  \"uint216[]\": RecsType.BigIntArray,\n  \"uint224[]\": RecsType.BigIntArray,\n  \"uint232[]\": RecsType.BigIntArray,\n  \"uint240[]\": RecsType.BigIntArray,\n  \"uint248[]\": RecsType.BigIntArray,\n  \"uint256[]\": RecsType.BigIntArray,\n  \"int8[]\": RecsType.NumberArray,\n  \"int16[]\": RecsType.NumberArray,\n  \"int24[]\": RecsType.NumberArray,\n  \"int32[]\": RecsType.NumberArray,\n  \"int40[]\": RecsType.NumberArray,\n  \"int48[]\": RecsType.NumberArray,\n  \"int56[]\": RecsType.BigIntArray,\n  \"int64[]\": RecsType.BigIntArray,\n  \"int72[]\": RecsType.BigIntArray,\n  \"int80[]\": RecsType.BigIntArray,\n  \"int88[]\": RecsType.BigIntArray,\n  \"int96[]\": RecsType.BigIntArray,\n  \"int104[]\": RecsType.BigIntArray,\n  \"int112[]\": RecsType.BigIntArray,\n  \"int120[]\": RecsType.BigIntArray,\n  \"int128[]\": RecsType.BigIntArray,\n  \"int136[]\": RecsType.BigIntArray,\n  \"int144[]\": RecsType.BigIntArray,\n  \"int152[]\": RecsType.BigIntArray,\n  \"int160[]\": RecsType.BigIntArray,\n  \"int168[]\": RecsType.BigIntArray,\n  \"int176[]\": RecsType.BigIntArray,\n  \"int184[]\": RecsType.BigIntArray,\n  \"int192[]\": RecsType.BigIntArray,\n  \"int200[]\": RecsType.BigIntArray,\n  \"int208[]\": RecsType.BigIntArray,\n  \"int216[]\": RecsType.BigIntArray,\n  \"int224[]\": RecsType.BigIntArray,\n  \"int232[]\": RecsType.BigIntArray,\n  \"int240[]\": RecsType.BigIntArray,\n  \"int248[]\": RecsType.BigIntArray,\n  \"int256[]\": RecsType.BigIntArray,\n  \"bytes1[]\": RecsType.StringArray,\n  \"bytes2[]\": RecsType.StringArray,\n  \"bytes3[]\": RecsType.StringArray,\n  \"bytes4[]\": RecsType.StringArray,\n  \"bytes5[]\": RecsType.StringArray,\n  \"bytes6[]\": RecsType.StringArray,\n  \"bytes7[]\": RecsType.StringArray,\n  \"bytes8[]\": RecsType.StringArray,\n  \"bytes9[]\": RecsType.StringArray,\n  \"bytes10[]\": RecsType.StringArray,\n  \"bytes11[]\": RecsType.StringArray,\n  \"bytes12[]\": RecsType.StringArray,\n  \"bytes13[]\": RecsType.StringArray,\n  \"bytes14[]\": RecsType.StringArray,\n  \"bytes15[]\": RecsType.StringArray,\n  \"bytes16[]\": RecsType.StringArray,\n  \"bytes17[]\": RecsType.StringArray,\n  \"bytes18[]\": RecsType.StringArray,\n  \"bytes19[]\": RecsType.StringArray,\n  \"bytes20[]\": RecsType.StringArray,\n  \"bytes21[]\": RecsType.StringArray,\n  \"bytes22[]\": RecsType.StringArray,\n  \"bytes23[]\": RecsType.StringArray,\n  \"bytes24[]\": RecsType.StringArray,\n  \"bytes25[]\": RecsType.StringArray,\n  \"bytes26[]\": RecsType.StringArray,\n  \"bytes27[]\": RecsType.StringArray,\n  \"bytes28[]\": RecsType.StringArray,\n  \"bytes29[]\": RecsType.StringArray,\n  \"bytes30[]\": RecsType.StringArray,\n  \"bytes31[]\": RecsType.StringArray,\n  \"bytes32[]\": RecsType.StringArray,\n  \"bool[]\": RecsType.T, // no boolean arr,\n  \"address[]\": RecsType.StringArray,\n  bytes: RecsType.String,\n  string: RecsType.String,\n} as const satisfies Record<SchemaAbiType, RecsType>;\n\nexport type SchemaAbiTypeToRecsType<T extends SchemaAbiType> = (typeof schemaAbiTypeToRecsType)[T];\n","import { Table } from \"@latticexyz/store\";\nimport { TableToComponent, tableToComponent } from \"./tableToComponent\";\nimport { mapObject } from \"@latticexyz/common/utils\";\nimport { World } from \"@latticexyz/recs\";\n\nexport type TablesToComponents<tables extends Record<string, Table>> = {\n  [tableName in keyof tables]: TableToComponent<tables[tableName]>;\n};\n\nexport function tablesToComponents<tables extends Record<string, Table>>(\n  world: World,\n  tables: tables\n): TablesToComponents<tables> {\n  return mapObject(tables, (table) => tableToComponent(world, table));\n}\n","import { StoreConfig, Table, ResolvedStoreConfig, resolveConfig } from \"@latticexyz/store\";\nimport { Component as RecsComponent, World as RecsWorld, getComponentValue, setComponent } from \"@latticexyz/recs\";\nimport { SyncOptions, SyncResult } from \"../common\";\nimport { RecsStorageAdapter, recsStorage } from \"./recsStorage\";\nimport { createStoreSync } from \"../createStoreSync\";\nimport { singletonEntity } from \"./singletonEntity\";\nimport { SyncStep } from \"../SyncStep\";\n\ntype SyncToRecsOptions<config extends StoreConfig, extraTables extends Record<string, Table>> = SyncOptions<config> & {\n  world: RecsWorld;\n  config: config;\n  tables?: extraTables;\n  startSync?: boolean;\n};\n\ntype SyncToRecsResult<config extends StoreConfig, extraTables extends Record<string, Table>> = SyncResult & {\n  components: RecsStorageAdapter<ResolvedStoreConfig<config>[\"tables\"] & extraTables>[\"components\"];\n  stopSync: () => void;\n};\n\nexport async function syncToRecs<config extends StoreConfig, extraTables extends Record<string, Table>>({\n  world,\n  config,\n  tables: extraTables,\n  startSync = true,\n  ...syncOptions\n}: SyncToRecsOptions<config, extraTables>): Promise<SyncToRecsResult<config, extraTables>> {\n  const tables = {\n    ...resolveConfig(config).tables,\n    ...extraTables,\n  } as ResolvedStoreConfig<config>[\"tables\"] & extraTables;\n\n  const { storageAdapter, components } = recsStorage({\n    world,\n    tables,\n    shouldSkipUpdateStream: (): boolean =>\n      getComponentValue(components.SyncProgress, singletonEntity)?.step !== SyncStep.LIVE,\n  });\n\n  const storeSync = await createStoreSync({\n    storageAdapter,\n    config,\n    ...syncOptions,\n    onProgress: ({ step, percentage, latestBlockNumber, lastBlockNumberProcessed, message }) => {\n      // already live, no need for more progress updates\n      if (getComponentValue(components.SyncProgress, singletonEntity)?.step === SyncStep.LIVE) return;\n\n      setComponent(components.SyncProgress, singletonEntity, {\n        step,\n        percentage,\n        latestBlockNumber,\n        lastBlockNumberProcessed,\n        message,\n      });\n\n      // when we switch to live, trigger update for all entities in all components\n      if (step === SyncStep.LIVE) {\n        for (const _component of Object.values(components)) {\n          // downcast component for easier calling of generic methods on all components\n          const component = _component as RecsComponent;\n          for (const entity of component.entities()) {\n            const value = getComponentValue(component, entity);\n            component.update$.next({ component, entity, value: [value, value] });\n          }\n        }\n      }\n    },\n  });\n\n  const sub = startSync ? storeSync.storedBlockLogs$.subscribe() : null;\n  const stopSync = (): void => {\n    sub?.unsubscribe();\n  };\n\n  world.registerDisposer(stopSync);\n\n  return {\n    ...storeSync,\n    components,\n    stopSync,\n  };\n}\n"],"mappings":"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A,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,KAAMA,EAAS,OACf,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,MAAOA,EAAS,OAChB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,OAAQA,EAAS,OACjB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OAClB,QAASA,EAAS,OACl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","names":["decodeAbiParameters","sliceHex","size","isHex","entityToHexKeyTuple","entity","length","_","index","decodeEntity","keySchema","entity","hexKeyTuple","entityToHexKeyTuple","key","type","index","decodeAbiParameters","encodeAbiParameters","concatHex","hexKeyTupleToEntity","hexKeyTuple","encodeEntity","keySchema","key","hexKeyTupleToEntity","keyName","type","encodeAbiParameters","isStoreComponent","component","resolveConfig","debug","getComponentValue","hasComponent","removeComponent","setComponent","defineComponent","Type","defineInternalComponents","world","stringToHex","getTableEntity","table","encodeEntity","stringToHex","hexToResource","spliceHex","decodeValueArgs","size","singletonEntity","hexKeyTupleToEntity","storeConfig","worldConfig","Type","defineComponent","RecsType","schemaAbiTypeToRecsType","mapObject","tableToComponent","world","table","defineComponent","fieldName","schemaAbiType","schemaAbiTypeToRecsType","Type","type","mapObject","tablesToComponents","world","tables","table","tableToComponent","storeTables","resolveConfig","storeConfig","worldTables","worldConfig","recsStorage","world","tables","shouldSkipUpdateStream","singletonEntity","components","tablesToComponents","defineInternalComponents","recsStorageAdapter","logs","newTables","isTableRegistrationLog","logToTable","newTable","tableEntity","getTableEntity","hasComponent","getComponentValue","setComponent","log","namespace","name","hexToResource","table","debug","component","c","entity","hexKeyTupleToEntity","value","decodeValueArgs","previousValue","previousStaticData","newStaticData","spliceHex","size","newValue","previousDynamicData","newDynamicData","removeComponent","resolveConfig","getComponentValue","setComponent","syncToRecs","world","config","extraTables","startSync","syncOptions","tables","resolveConfig","storageAdapter","components","recsStorage","getComponentValue","singletonEntity","storeSync","createStoreSync","step","percentage","latestBlockNumber","lastBlockNumberProcessed","message","setComponent","_component","component","entity","value","sub","stopSync"]}