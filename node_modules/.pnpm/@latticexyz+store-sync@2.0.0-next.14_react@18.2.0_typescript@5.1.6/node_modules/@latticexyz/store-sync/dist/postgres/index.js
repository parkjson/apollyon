import{a as j,b as Q}from"../chunk-4J5NR5O4.js";import{f as q,j as E}from"../chunk-7YRL77Z6.js";import"../chunk-5D4GTPIW.js";import{pgSchema as ne}from"drizzle-orm/pg-core";import{boolean as ee,text as te}from"drizzle-orm/pg-core";import{assertExhaustive as ae}from"@latticexyz/common/utils";import{customType as B}from"drizzle-orm/pg-core";import W from"superjson";import{bytesToHex as F,getAddress as Z,hexToBytes as J}from"viem";var v=e=>B({dataType(){return"text"},toDriver(t){return W.stringify(t)},fromDriver(t){return W.parse(t)}})(e),w=(e,t)=>B({dataType(){return t},toDriver(n){return String(n)},fromDriver(n){return Number(n)}})(e),C=(e,t)=>B({dataType(){return t},toDriver(n){return String(n)},fromDriver(n){return BigInt(n)}})(e),V=e=>B({dataType(){return"bytea"},toDriver(t){return J(t)},fromDriver(t){return F(t)}})(e),I=e=>B({dataType(){return"bytea"},toDriver(t){return J(t)},fromDriver(t){return Z(F(t))}})(e);function g(e,t){switch(t){case"bool":return ee(e);case"uint8":case"uint16":case"int8":case"int16":return w(e,"smallint");case"uint24":case"uint32":case"int24":case"int32":return w(e,"integer");case"uint40":case"uint48":case"int40":case"int48":return w(e,"bigint");case"uint56":case"uint64":case"int56":case"int64":return C(e,"bigint");case"uint72":case"uint80":case"uint88":case"uint96":case"uint104":case"uint112":case"uint120":case"uint128":case"uint136":case"uint144":case"uint152":case"uint160":case"uint168":case"uint176":case"uint184":case"uint192":case"uint200":case"uint208":case"uint216":case"uint224":case"uint232":case"uint240":case"uint248":case"uint256":case"int72":case"int80":case"int88":case"int96":case"int104":case"int112":case"int120":case"int128":case"int136":case"int144":case"int152":case"int160":case"int168":case"int176":case"int184":case"int192":case"int200":case"int208":case"int216":case"int224":case"int232":case"int240":case"int248":case"int256":return C(e,"numeric");case"bytes1":case"bytes2":case"bytes3":case"bytes4":case"bytes5":case"bytes6":case"bytes7":case"bytes8":case"bytes9":case"bytes10":case"bytes11":case"bytes12":case"bytes13":case"bytes14":case"bytes15":case"bytes16":case"bytes17":case"bytes18":case"bytes19":case"bytes20":case"bytes21":case"bytes22":case"bytes23":case"bytes24":case"bytes25":case"bytes26":case"bytes27":case"bytes28":case"bytes29":case"bytes30":case"bytes31":case"bytes32":case"bytes":return V(e);case"address":return I(e);case"uint8[]":case"uint16[]":case"uint24[]":case"uint32[]":case"uint40[]":case"uint48[]":case"uint56[]":case"uint64[]":case"uint72[]":case"uint80[]":case"uint88[]":case"uint96[]":case"uint104[]":case"uint112[]":case"uint120[]":case"uint128[]":case"uint136[]":case"uint144[]":case"uint152[]":case"uint160[]":case"uint168[]":case"uint176[]":case"uint184[]":case"uint192[]":case"uint200[]":case"uint208[]":case"uint216[]":case"uint224[]":case"uint232[]":case"uint240[]":case"uint248[]":case"uint256[]":case"int8[]":case"int16[]":case"int24[]":case"int32[]":case"int40[]":case"int48[]":case"int56[]":case"int64[]":case"int72[]":case"int80[]":case"int88[]":case"int96[]":case"int104[]":case"int112[]":case"int120[]":case"int128[]":case"int136[]":case"int144[]":case"int152[]":case"int160[]":case"int168[]":case"int176[]":case"int184[]":case"int192[]":case"int200[]":case"int208[]":case"int216[]":case"int224[]":case"int232[]":case"int240[]":case"int248[]":case"int256[]":case"bytes1[]":case"bytes2[]":case"bytes3[]":case"bytes4[]":case"bytes5[]":case"bytes6[]":case"bytes7[]":case"bytes8[]":case"bytes9[]":case"bytes10[]":case"bytes11[]":case"bytes12[]":case"bytes13[]":case"bytes14[]":case"bytes15[]":case"bytes16[]":case"bytes17[]":case"bytes18[]":case"bytes19[]":case"bytes20[]":case"bytes21[]":case"bytes22[]":case"bytes23[]":case"bytes24[]":case"bytes25[]":case"bytes26[]":case"bytes27[]":case"bytes28[]":case"bytes29[]":case"bytes30[]":case"bytes31[]":case"bytes32[]":case"bool[]":return v(e);case"address[]":return v(e);case"string":return te(e);default:ae(t,`Missing column type for schema ABI type ${t}`)}}import{getAddress as re}from"viem";var ce={__key:g("__key","bytes").primaryKey(),__staticData:g("__staticData","bytes"),__encodedLengths:g("__encodedLengths","bytes"),__dynamicData:g("__dynamicData","bytes"),__lastUpdatedBlockNumber:g("__lastUpdatedBlockNumber","uint256").notNull(),__isDeleted:g("__isDeleted","bool").notNull()};function A({address:e,namespace:t,name:n,keySchema:c,valueSchema:s}){let m=`${re(e)}__${t}`,i=Object.fromEntries(Object.entries(c).map(([o,r])=>[o,g(o,r).notNull()])),p=Object.fromEntries(Object.entries(s).map(([o,r])=>[o,g(o,r).notNull()])),f={...i,...p,...ce};return ne(m).table(n,f)}import{getTableConfig as M}from"drizzle-orm/pg-core";import{integer as z,pgSchema as ie,text as K}from"drizzle-orm/pg-core";function P(){let e=ie("__mud_internal");return{chain:e.table("chain",{schemaVersion:z("schema_version").notNull().primaryKey(),chainId:w("chain_id","bigint").notNull().primaryKey(),lastUpdatedBlockNumber:C("last_updated_block_number","numeric"),lastError:K("last_error")}),tables:e.table("tables",{schemaVersion:z("schema_version").primaryKey(),key:K("key").notNull().primaryKey(),address:I("address").notNull(),tableId:V("table_id").notNull(),namespace:K("namespace").notNull(),name:K("name").notNull(),keySchema:v("key_schema").notNull(),valueSchema:v("value_schema").notNull(),lastUpdatedBlockNumber:C("last_updated_block_number","numeric"),lastError:K("last_error")})}}import{inArray as oe}from"drizzle-orm";async function U(e,t=[]){let n=P();return await e.select().from(n.tables).where(t.length?oe(n.tables.key,[...new Set(t)]):void 0)}import{isDefined as ye}from"@latticexyz/common/utils";var d=q.extend("postgres");import{sql as be}from"drizzle-orm";import{DummyDriver as me,Kysely as le,PostgresAdapter as ue,PostgresIntrospector as de,PostgresQueryCompiler as pe}from"kysely";var D=new le({dialect:{createAdapter:()=>new ue,createDriver:()=>new me,createIntrospector:e=>new de(e),createQueryCompiler:()=>new pe}});async function ut(e){let t=P(),n=(await U(e)).map(A),c=[...new Set(n.map(s=>M(s).schema))].filter(ye);for(let s of c)try{d(`dropping namespace ${s} and all of its tables`),await e.execute(be.raw(D.schema.dropSchema(s).ifExists().cascade().compile().sql))}catch(m){d(`failed to drop namespace ${s}`,m)}for(let s of Object.values(t)){let m=M(s);d(`deleting all rows from ${m.schema}.${m.name}`),await e.delete(s)}}var H=1;import{concatHex as Se,size as Te}from"viem";import{eq as R,inArray as De}from"drizzle-orm";import{hexToResource as xe,spliceHex as X}from"@latticexyz/common";import{getTableConfig as G}from"drizzle-orm/pg-core";import{getTableColumns as ge,sql as $}from"drizzle-orm";import{isDefined as fe}from"@latticexyz/common/utils";async function L(e,t){let n=[...new Set(t.map(c=>G(c).schema).filter(fe))];return await e.transaction(async c=>{for(let s of n)d(`creating namespace ${s}`),await c.execute($.raw(D.schema.createSchema(s).ifNotExists().compile().sql));for(let s of t){let m=G(s),p=(m.schema?D.withSchema(m.schema):D).schema.createTable(m.name).ifNotExists(),f=Object.values(ge(s));for(let o of f)p=p.addColumn(o.name,o.getSQLType(),r=>(o.notNull&&(r=r.notNull()),o.hasDefault&&typeof o.default<"u"&&(r=r.defaultTo(o.default)),r));let k=f.filter(o=>o.primary).map(o=>o.name);k.length&&(p=p.addPrimaryKeyConstraint(`${m.name}__pk`,k)),d(`creating table ${m.name} in namespace ${m.schema}`),await c.execute($.raw(p.compile().sql))}}),async()=>{for(let c of n)try{d(`dropping namespace ${c} and all of its tables`),await e.execute($.raw(D.schema.dropSchema(c).ifExists().cascade().compile().sql))}catch(s){d(`failed to drop namespace ${c}`,s)}}}import{getAddress as he}from"viem";import{hexToResource as _e}from"@latticexyz/common";function h({address:e,tableId:t}){let{namespace:n,name:c}=_e(t);return`${he(e)}:${n}:${c}`}import{decodeKey as ve,decodeValueArgs as O}from"@latticexyz/protocol-parser";async function Y({database:e,publicClient:t}){let n=[],c=t.chain?.id??await t.getChainId(),s=P();n.push(await L(e,Object.values(s)));async function m({blockNumber:i,logs:p}){let f=p.filter(j).map(Q),k=f.map(A);n.push(await L(e,k)),await e.transaction(async r=>{for(let N of f)await r.insert(s.tables).values({schemaVersion:1,key:h(N),...N,lastUpdatedBlockNumber:i}).onConflictDoNothing().execute()});let o=await U(e,p.map(r=>h({address:r.address,tableId:r.args.tableId})));await e.transaction(async r=>{let N=o.filter(a=>p.some(l=>h({address:l.address,tableId:l.args.tableId})===h(a)));N.length&&await r.update(s.tables).set({lastUpdatedBlockNumber:i}).where(De(s.tables.key,[...new Set(N.map(h))])).execute();for(let a of p){let l=o.find(u=>h(u)===h({address:a.address,tableId:a.args.tableId}));if(!l){let{namespace:u,name:S}=xe(a.args.tableId);d(`table ${u}:${S} not found, skipping log`,a);continue}let y=A(l),x=Se(a.args.keyTuple),_=ve(l.keySchema,a.args.keyTuple);if(d(a.eventName,a),a.eventName==="Store_SetRecord"){let u=O(l.valueSchema,a.args);d("upserting record",{namespace:l.namespace,name:l.name,key:_,value:u}),await r.insert(y).values({__key:x,__staticData:a.args.staticData,__encodedLengths:a.args.encodedLengths,__dynamicData:a.args.dynamicData,__lastUpdatedBlockNumber:i,__isDeleted:!1,..._,...u}).onConflictDoUpdate({target:y.__key,set:{__staticData:a.args.staticData,__encodedLengths:a.args.encodedLengths,__dynamicData:a.args.dynamicData,__lastUpdatedBlockNumber:i,__isDeleted:!1,...u}}).execute()}else if(a.eventName==="Store_SpliceStaticData"){let u=(await r.select().from(y).where(R(y.__key,x)).execute())[0],S=u?.__staticData??"0x",b=X(S,a.args.start,Te(a.args.data),a.args.data),T=O(l.valueSchema,{staticData:b,encodedLengths:u?.__encodedLengths??"0x",dynamicData:u?.__dynamicData??"0x"});d("upserting record via splice static",{namespace:l.namespace,name:l.name,key:_,previousStaticData:S,newStaticData:b,previousValue:u,newValue:T}),await r.insert(y).values({__key:x,__staticData:b,__lastUpdatedBlockNumber:i,__isDeleted:!1,..._,...T}).onConflictDoUpdate({target:y.__key,set:{__staticData:b,__lastUpdatedBlockNumber:i,__isDeleted:!1,...T}}).execute()}else if(a.eventName==="Store_SpliceDynamicData"){let u=(await r.select().from(y).where(R(y.__key,x)).execute())[0],S=u?.__dynamicData??"0x",b=X(S,a.args.start,a.args.deleteCount,a.args.data),T=O(l.valueSchema,{staticData:u?.__staticData??"0x",encodedLengths:a.args.encodedLengths,dynamicData:b});d("upserting record via splice dynamic",{namespace:l.namespace,name:l.name,key:_,previousDynamicData:S,newDynamicData:b,previousValue:u,newValue:T}),await r.insert(y).values({__key:x,__encodedLengths:a.args.encodedLengths,__dynamicData:b,__lastUpdatedBlockNumber:i,__isDeleted:!1,..._,...T}).onConflictDoUpdate({target:y.__key,set:{__encodedLengths:a.args.encodedLengths,__dynamicData:b,__lastUpdatedBlockNumber:i,__isDeleted:!1,...T}}).execute()}else a.eventName==="Store_DeleteRecord"&&(d("deleting record",{namespace:l.namespace,name:l.name,key:_}),await r.update(y).set({__lastUpdatedBlockNumber:i,__isDeleted:!0}).where(R(y.__key,x)).execute())}await r.insert(s.chain).values({schemaVersion:1,chainId:c,lastUpdatedBlockNumber:i}).onConflictDoUpdate({target:[s.chain.schemaVersion,s.chain.chainId],set:{lastUpdatedBlockNumber:i}}).execute()})}return{storageAdapter:m,internalTables:s,cleanUp:async()=>{for(let i of n)await i()}}}async function Qt({config:e,database:t,publicClient:n,startSync:c=!0,...s}){let{storageAdapter:m}=await Y({database:t,publicClient:n,config:e}),i=await E({storageAdapter:m,config:e,publicClient:n,...s}),p=c?i.storedBlockLogs$.subscribe():null;return{...i,stopSync:()=>{p?.unsubscribe()}}}export{I as asAddress,C as asBigInt,V as asHex,v as asJson,w as asNumber,P as buildInternalTables,A as buildTable,ut as cleanDatabase,U as getTables,ce as metaColumns,Y as postgresStorage,H as schemaVersion,L as setupTables,Qt as syncToPostgres};
//# sourceMappingURL=index.js.map