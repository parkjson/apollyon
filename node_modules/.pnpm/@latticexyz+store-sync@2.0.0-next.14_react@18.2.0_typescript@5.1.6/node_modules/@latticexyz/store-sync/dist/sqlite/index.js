import{a as U,b as H}from"../chunk-4J5NR5O4.js";import{f as A,j as Q}from"../chunk-7YRL77Z6.js";import"../chunk-5D4GTPIW.js";import{sqliteTable as Z}from"drizzle-orm/sqlite-core";import{blob as G,integer as $,text as R}from"drizzle-orm/sqlite-core";import{assertExhaustive as X}from"@latticexyz/common/utils";import{customType as k}from"drizzle-orm/sqlite-core";import I from"superjson";import{getAddress as M}from"viem";var h=t=>k({dataType(){return"text"},toDriver(a){return I.stringify(a)},fromDriver(a){return I.parse(a)}})(t),L=t=>k({dataType(){return"text"},toDriver(a){return a.toLowerCase()},fromDriver(a){return M(a)}})(t),O=t=>k({dataType(){return"string"}})(t);function p(t,a){switch(a){case"bool":return $(t,{mode:"boolean"});case"uint8":case"uint16":case"uint24":case"uint32":case"uint40":case"uint48":case"int8":case"int16":case"int24":case"int32":case"int40":case"int48":return $(t,{mode:"number"});case"uint56":case"uint64":case"uint72":case"uint80":case"uint88":case"uint96":case"uint104":case"uint112":case"uint120":case"uint128":case"uint136":case"uint144":case"uint152":case"uint160":case"uint168":case"uint176":case"uint184":case"uint192":case"uint200":case"uint208":case"uint216":case"uint224":case"uint232":case"uint240":case"uint248":case"uint256":case"int56":case"int64":case"int72":case"int80":case"int88":case"int96":case"int104":case"int112":case"int120":case"int128":case"int136":case"int144":case"int152":case"int160":case"int168":case"int176":case"int184":case"int192":case"int200":case"int208":case"int216":case"int224":case"int232":case"int240":case"int248":case"int256":return G(t,{mode:"bigint"});case"bytes1":case"bytes2":case"bytes3":case"bytes4":case"bytes5":case"bytes6":case"bytes7":case"bytes8":case"bytes9":case"bytes10":case"bytes11":case"bytes12":case"bytes13":case"bytes14":case"bytes15":case"bytes16":case"bytes17":case"bytes18":case"bytes19":case"bytes20":case"bytes21":case"bytes22":case"bytes23":case"bytes24":case"bytes25":case"bytes26":case"bytes27":case"bytes28":case"bytes29":case"bytes30":case"bytes31":case"bytes32":case"bytes":return R(t);case"address":return L(t);case"uint8[]":case"uint16[]":case"uint24[]":case"uint32[]":case"uint40[]":case"uint48[]":case"uint56[]":case"uint64[]":case"uint72[]":case"uint80[]":case"uint88[]":case"uint96[]":case"uint104[]":case"uint112[]":case"uint120[]":case"uint128[]":case"uint136[]":case"uint144[]":case"uint152[]":case"uint160[]":case"uint168[]":case"uint176[]":case"uint184[]":case"uint192[]":case"uint200[]":case"uint208[]":case"uint216[]":case"uint224[]":case"uint232[]":case"uint240[]":case"uint248[]":case"uint256[]":case"int8[]":case"int16[]":case"int24[]":case"int32[]":case"int40[]":case"int48[]":case"int56[]":case"int64[]":case"int72[]":case"int80[]":case"int88[]":case"int96[]":case"int104[]":case"int112[]":case"int120[]":case"int128[]":case"int136[]":case"int144[]":case"int152[]":case"int160[]":case"int168[]":case"int176[]":case"int184[]":case"int192[]":case"int200[]":case"int208[]":case"int216[]":case"int224[]":case"int232[]":case"int240[]":case"int248[]":case"int256[]":case"bytes1[]":case"bytes2[]":case"bytes3[]":case"bytes4[]":case"bytes5[]":case"bytes6[]":case"bytes7[]":case"bytes8[]":case"bytes9[]":case"bytes10[]":case"bytes11[]":case"bytes12[]":case"bytes13[]":case"bytes14[]":case"bytes15[]":case"bytes16[]":case"bytes17[]":case"bytes18[]":case"bytes19[]":case"bytes20[]":case"bytes21[]":case"bytes22[]":case"bytes23[]":case"bytes24[]":case"bytes25[]":case"bytes26[]":case"bytes27[]":case"bytes28[]":case"bytes29[]":case"bytes30[]":case"bytes31[]":case"bytes32[]":case"bool[]":return h(t);case"address[]":return h(t);case"string":return R(t);default:X(a,`Missing SQLite column type for schema ABI type ${a}`)}}import{getAddress as Y}from"viem";function T(t,a,c){return`${Y(t)}__${a}__${c}`}var ee={__key:p("__key","bytes").primaryKey(),__staticData:p("__staticData","bytes"),__encodedLengths:p("__encodedLengths","bytes"),__dynamicData:p("__dynamicData","bytes"),__lastUpdatedBlockNumber:p("__lastUpdatedBlockNumber","uint256").notNull(),__isDeleted:p("__isDeleted","bool").notNull()};function q({address:t,namespace:a,name:c,keySchema:b,valueSchema:n}){let u=T(t,a,c),m=Object.fromEntries(Object.entries(b).map(([s,r])=>[s,p(s,r).notNull()])),l=Object.fromEntries(Object.entries(n).map(([s,r])=>[s,p(s,r).notNull()])),i={...m,...l,...ee};return Z(u,i)}import{inArray as te}from"drizzle-orm";import{blob as j,integer as w,sqliteTable as E,text as C}from"drizzle-orm/sqlite-core";var v=E("__chainState",{schemaVersion:w("schema_version").notNull().primaryKey(),chainId:w("chain_id").notNull().primaryKey(),lastUpdatedBlockNumber:j("last_updated_block_number",{mode:"bigint"}),lastError:C("last_error")}),d=E("__mudStoreTables",{schemaVersion:w("schema_version").primaryKey(),id:C("id").notNull().primaryKey(),address:L("address").notNull(),tableId:O("table_id").notNull(),namespace:C("namespace").notNull(),name:C("name").notNull(),keySchema:h("key_schema").notNull(),valueSchema:h("value_schema").notNull(),lastUpdatedBlockNumber:j("last_updated_block_number",{mode:"bigint"}),lastError:C("last_error")});function P(t,a=[]){let c=Array.from(new Set(a.map(n=>T(n.address,n.namespace,n.name))));return t.select().from(d).where(c.length?te(d.id,c):void 0).all()}var K=1;import{concatHex as le,getAddress as W,size as ue}from"viem";import{and as de,eq as D,sql as B}from"drizzle-orm";import{DummyDriver as ae,Kysely as se,SqliteAdapter as ne,SqliteIntrospector as ce,SqliteQueryCompiler as ie}from"kysely";import{getTableColumns as re,getTableName as oe}from"drizzle-orm";var me=new se({dialect:{createAdapter:()=>new ne,createDriver:()=>new ae,createIntrospector:t=>new ce(t),createQueryCompiler:()=>new ie}});function N(t){let a=oe(t),c=me.schema.createTable(a).ifNotExists(),b=Object.values(re(t));for(let m of b)c=c.addColumn(m.name,m.getSQLType(),l=>(m.notNull&&(l=l.notNull()),m.hasDefault&&typeof m.default<"u"&&(l=l.defaultTo(m.default)),l));let n=b.filter(m=>m.primary).map(m=>m.name);n.length&&(c=c.addPrimaryKeyConstraint(`${a}__primaryKey`,n));let{sql:u}=c.compile();return u}var _=A.extend("sqlite");import{hexToResource as F,spliceHex as J}from"@latticexyz/common";import{decodeKey as ye,decodeValueArgs as V}from"@latticexyz/protocol-parser";async function z({database:t,publicClient:a}){let c=a.chain?.id??await a.getChainId();return t.run(B.raw(N(v))),t.run(B.raw(N(d))),async function({blockNumber:n,logs:u}){let m=u.filter(U).map(H);await t.transaction(async i=>{for(let e of m){_(`creating table ${e.namespace}:${e.name} for world ${c}:${e.address}`);let s=q(e);i.run(B.raw(N(s))),i.insert(d).values({schemaVersion:1,id:T(e.address,e.namespace,e.name),...e,lastUpdatedBlockNumber:n}).onConflictDoNothing().run()}});let l=P(t,Array.from(new Set(u.map(i=>JSON.stringify({address:W(i.address),...F(i.args.tableId)})))).map(i=>JSON.parse(i)));await t.transaction(async i=>{for(let{address:e,namespace:s,name:r}of l)i.update(d).set({lastUpdatedBlockNumber:n}).where(de(D(d.address,e),D(d.namespace,s),D(d.name,r))).run();for(let e of u){let s=l.find(o=>o.address===W(e.address)&&o.tableId===e.args.tableId);if(!s){let o=F(e.args.tableId);_(`table ${o.namespace}:${o.name} not found, skipping log`,e);continue}let r=q(s),g=le(e.args.keyTuple),f=ye(s.keySchema,e.args.keyTuple);if(e.eventName==="Store_SetRecord"){let o=V(s.valueSchema,e.args);_("upserting record",{namespace:s.namespace,name:s.name,key:f,value:o}),i.insert(r).values({__key:g,__staticData:e.args.staticData,__encodedLengths:e.args.encodedLengths,__dynamicData:e.args.dynamicData,__lastUpdatedBlockNumber:n,__isDeleted:!1,...f,...o}).onConflictDoUpdate({target:r.__key,set:{__staticData:e.args.staticData,__encodedLengths:e.args.encodedLengths,__dynamicData:e.args.dynamicData,__lastUpdatedBlockNumber:n,__isDeleted:!1,...o}}).run()}else if(e.eventName==="Store_SpliceStaticData"){let o=(await i.select().from(r).where(D(r.__key,g)).execute())[0],x=o?.__staticData??"0x",y=J(x,e.args.start,ue(e.args.data),e.args.data),S=V(s.valueSchema,{staticData:y,encodedLengths:o?.__encodedLengths??"0x",dynamicData:o?.__dynamicData??"0x"});_("upserting record via splice static",{namespace:s.namespace,name:s.name,key:f,previousStaticData:x,newStaticData:y,previousValue:o,newValue:S}),i.insert(r).values({__key:g,__staticData:y,__lastUpdatedBlockNumber:n,__isDeleted:!1,...f,...S}).onConflictDoUpdate({target:r.__key,set:{__staticData:y,__lastUpdatedBlockNumber:n,__isDeleted:!1,...S}}).run()}else if(e.eventName==="Store_SpliceDynamicData"){let o=(await i.select().from(r).where(D(r.__key,g)).execute())[0],x=o?.__dynamicData??"0x",y=J(x,e.args.start,e.args.deleteCount,e.args.data),S=V(s.valueSchema,{staticData:o?.__staticData??"0x",encodedLengths:e.args.encodedLengths,dynamicData:y});_("upserting record via splice dynamic",{namespace:s.namespace,name:s.name,key:f,previousDynamicData:x,newDynamicData:y,previousValue:o,newValue:S}),i.insert(r).values({__key:g,__encodedLengths:e.args.encodedLengths,__dynamicData:y,__lastUpdatedBlockNumber:n,__isDeleted:!1,...f,...S}).onConflictDoUpdate({target:r.__key,set:{__encodedLengths:e.args.encodedLengths,__dynamicData:y,__lastUpdatedBlockNumber:n,__isDeleted:!1,...S}}).run()}else e.eventName==="Store_DeleteRecord"&&(_("deleting record",{namespace:s.namespace,name:s.name,key:f}),i.update(r).set({__lastUpdatedBlockNumber:n,__isDeleted:!0}).where(D(r.__key,g)).run())}i.insert(v).values({schemaVersion:1,chainId:c,lastUpdatedBlockNumber:n}).onConflictDoUpdate({target:[v.schemaVersion,v.chainId],set:{lastUpdatedBlockNumber:n}}).run()})}}async function lt({config:t,database:a,publicClient:c,startSync:b=!0,...n}){let u=await Q({storageAdapter:await z({database:a,publicClient:c,config:t}),config:t,publicClient:c,...n}),m=b?u.storedBlockLogs$.subscribe():null;return{...u,stopSync:()=>{m?.unsubscribe()}}}export{q as buildTable,v as chainState,P as getTables,ee as metaColumns,d as mudStoreTables,K as schemaVersion,z as sqliteStorage,lt as syncToSqlite};
//# sourceMappingURL=index.js.map