{"version":3,"sources":["../src/trpc-indexer/createAppRouter.ts","../src/trpc-indexer/createIndexerClient.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { QueryAdapter } from \"./common\";\nimport { isHex } from \"viem\";\nimport { initTRPC } from \"@trpc/server\";\nimport superjson from \"superjson\";\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport function createAppRouter() {\n  const t = initTRPC.context<{ queryAdapter: QueryAdapter }>().create({\n    transformer: superjson,\n  });\n\n  return t.router({\n    findAll: t.procedure\n      .input(\n        z.object({\n          chainId: z.number(),\n          address: z.string().refine(isHex).optional(),\n          filters: z\n            .array(\n              z.object({\n                tableId: z.string().refine(isHex),\n                key0: z.string().refine(isHex).optional(),\n                key1: z.string().refine(isHex).optional(),\n              })\n            )\n            .optional(),\n        })\n      )\n      .query(async (opts): ReturnType<QueryAdapter[\"findAll\"]> => {\n        const { queryAdapter } = opts.ctx;\n        const { chainId, address, filters } = opts.input;\n        return queryAdapter.findAll({ chainId, address, filters });\n      }),\n  });\n}\n\nexport type AppRouter = ReturnType<typeof createAppRouter>;\n","import { createTRPCProxyClient, httpBatchLink, CreateTRPCProxyClient } from \"@trpc/client\";\nimport superjson from \"superjson\";\nimport type { AppRouter } from \"./createAppRouter\";\n\ntype CreateIndexerClientOptions = {\n  /**\n   * tRPC endpoint URL like `https://indexer.dev.linfra.xyz/trpc`.\n   */\n  url: string;\n};\n\n/**\n * Creates a tRPC client to talk to a MUD indexer.\n *\n * @param {CreateIndexerClientOptions} options See `CreateIndexerClientOptions`.\n * @returns {CreateTRPCProxyClient<AppRouter>} A typed tRPC client.\n */\nexport function createIndexerClient({ url }: CreateIndexerClientOptions): CreateTRPCProxyClient<AppRouter> {\n  return createTRPCProxyClient<AppRouter>({\n    transformer: superjson,\n    links: [httpBatchLink({ url })],\n  });\n}\n"],"mappings":"AAAA,OAAS,KAAAA,MAAS,MAElB,OAAS,SAAAC,MAAa,OACtB,OAAS,YAAAC,MAAgB,eACzB,OAAOC,MAAe,YAGf,SAASC,GAAkB,CAChC,IAAMC,EAAIH,EAAS,QAAwC,EAAE,OAAO,CAClE,YAAaC,CACf,CAAC,EAED,OAAOE,EAAE,OAAO,CACd,QAASA,EAAE,UACR,MACCL,EAAE,OAAO,CACP,QAASA,EAAE,OAAO,EAClB,QAASA,EAAE,OAAO,EAAE,OAAOC,CAAK,EAAE,SAAS,EAC3C,QAASD,EACN,MACCA,EAAE,OAAO,CACP,QAASA,EAAE,OAAO,EAAE,OAAOC,CAAK,EAChC,KAAMD,EAAE,OAAO,EAAE,OAAOC,CAAK,EAAE,SAAS,EACxC,KAAMD,EAAE,OAAO,EAAE,OAAOC,CAAK,EAAE,SAAS,CAC1C,CAAC,CACH,EACC,SAAS,CACd,CAAC,CACH,EACC,MAAM,MAAOK,GAA8C,CAC1D,GAAM,CAAE,aAAAC,CAAa,EAAID,EAAK,IACxB,CAAE,QAAAE,EAAS,QAAAC,EAAS,QAAAC,CAAQ,EAAIJ,EAAK,MAC3C,OAAOC,EAAa,QAAQ,CAAE,QAAAC,EAAS,QAAAC,EAAS,QAAAC,CAAQ,CAAC,CAC3D,CAAC,CACL,CAAC,CACH,CCnCA,OAAS,yBAAAC,EAAuB,iBAAAC,MAA4C,eAC5E,OAAOC,MAAe,YAgBf,SAASC,EAAoB,CAAE,IAAAC,CAAI,EAAiE,CACzG,OAAOJ,EAAiC,CACtC,YAAaE,EACb,MAAO,CAACD,EAAc,CAAE,IAAAG,CAAI,CAAC,CAAC,CAChC,CAAC,CACH","names":["z","isHex","initTRPC","superjson","createAppRouter","t","opts","queryAdapter","chainId","address","filters","createTRPCProxyClient","httpBatchLink","superjson","createIndexerClient","url"]}