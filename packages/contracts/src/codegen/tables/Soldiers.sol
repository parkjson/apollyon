// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("Soldiers")))
);
ResourceId constant SoldiersTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0094050014202020200000000000000000000000000000000000000000000000
);

struct SoldiersData {
  address allegiance;
  uint256 tileId;
  uint256 attack;
  uint256 defense;
  uint256 mobility;
}

library Soldiers {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.UINT256;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](5);
    _valueSchema[0] = SchemaType.ADDRESS;
    _valueSchema[1] = SchemaType.UINT256;
    _valueSchema[2] = SchemaType.UINT256;
    _valueSchema[3] = SchemaType.UINT256;
    _valueSchema[4] = SchemaType.UINT256;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "soldierId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "allegiance";
    fieldNames[1] = "tileId";
    fieldNames[2] = "attack";
    fieldNames[3] = "defense";
    fieldNames[4] = "mobility";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get allegiance.
   */
  function getAllegiance(uint256 soldierId) internal view returns (address allegiance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get allegiance.
   */
  function _getAllegiance(uint256 soldierId) internal view returns (address allegiance) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set allegiance.
   */
  function setAllegiance(uint256 soldierId, address allegiance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((allegiance)), _fieldLayout);
  }

  /**
   * @notice Set allegiance.
   */
  function _setAllegiance(uint256 soldierId, address allegiance) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((allegiance)), _fieldLayout);
  }

  /**
   * @notice Get tileId.
   */
  function getTileId(uint256 soldierId) internal view returns (uint256 tileId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get tileId.
   */
  function _getTileId(uint256 soldierId) internal view returns (uint256 tileId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set tileId.
   */
  function setTileId(uint256 soldierId, uint256 tileId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((tileId)), _fieldLayout);
  }

  /**
   * @notice Set tileId.
   */
  function _setTileId(uint256 soldierId, uint256 tileId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((tileId)), _fieldLayout);
  }

  /**
   * @notice Get attack.
   */
  function getAttack(uint256 soldierId) internal view returns (uint256 attack) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get attack.
   */
  function _getAttack(uint256 soldierId) internal view returns (uint256 attack) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set attack.
   */
  function setAttack(uint256 soldierId, uint256 attack) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((attack)), _fieldLayout);
  }

  /**
   * @notice Set attack.
   */
  function _setAttack(uint256 soldierId, uint256 attack) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((attack)), _fieldLayout);
  }

  /**
   * @notice Get defense.
   */
  function getDefense(uint256 soldierId) internal view returns (uint256 defense) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get defense.
   */
  function _getDefense(uint256 soldierId) internal view returns (uint256 defense) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set defense.
   */
  function setDefense(uint256 soldierId, uint256 defense) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((defense)), _fieldLayout);
  }

  /**
   * @notice Set defense.
   */
  function _setDefense(uint256 soldierId, uint256 defense) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((defense)), _fieldLayout);
  }

  /**
   * @notice Get mobility.
   */
  function getMobility(uint256 soldierId) internal view returns (uint256 mobility) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get mobility.
   */
  function _getMobility(uint256 soldierId) internal view returns (uint256 mobility) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set mobility.
   */
  function setMobility(uint256 soldierId, uint256 mobility) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((mobility)), _fieldLayout);
  }

  /**
   * @notice Set mobility.
   */
  function _setMobility(uint256 soldierId, uint256 mobility) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((mobility)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 soldierId) internal view returns (SoldiersData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 soldierId) internal view returns (SoldiersData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 soldierId,
    address allegiance,
    uint256 tileId,
    uint256 attack,
    uint256 defense,
    uint256 mobility
  ) internal {
    bytes memory _staticData = encodeStatic(allegiance, tileId, attack, defense, mobility);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 soldierId,
    address allegiance,
    uint256 tileId,
    uint256 attack,
    uint256 defense,
    uint256 mobility
  ) internal {
    bytes memory _staticData = encodeStatic(allegiance, tileId, attack, defense, mobility);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 soldierId, SoldiersData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.allegiance,
      _table.tileId,
      _table.attack,
      _table.defense,
      _table.mobility
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 soldierId, SoldiersData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.allegiance,
      _table.tileId,
      _table.attack,
      _table.defense,
      _table.mobility
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (address allegiance, uint256 tileId, uint256 attack, uint256 defense, uint256 mobility) {
    allegiance = (address(Bytes.slice20(_blob, 0)));

    tileId = (uint256(Bytes.slice32(_blob, 20)));

    attack = (uint256(Bytes.slice32(_blob, 52)));

    defense = (uint256(Bytes.slice32(_blob, 84)));

    mobility = (uint256(Bytes.slice32(_blob, 116)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    PackedCounter,
    bytes memory
  ) internal pure returns (SoldiersData memory _table) {
    (_table.allegiance, _table.tileId, _table.attack, _table.defense, _table.mobility) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 soldierId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 soldierId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    address allegiance,
    uint256 tileId,
    uint256 attack,
    uint256 defense,
    uint256 mobility
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(allegiance, tileId, attack, defense, mobility);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    address allegiance,
    uint256 tileId,
    uint256 attack,
    uint256 defense,
    uint256 mobility
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(allegiance, tileId, attack, defense, mobility);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 soldierId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(soldierId));

    return _keyTuple;
  }
}
